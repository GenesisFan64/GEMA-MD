 AS V1.42 Beta [Bld 118] - source file main.asm - page 1 - 12/23/2020 18:25:44


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; SEGA GENESIS GAME TEMPLATE
       4/       0 :                     ; +-----------------------------------------------------------------+
       5/       0 :                     
       6/       0 :                     		cpu 68000				; [AS] Current CPU is 68000
       7/       0 :                     		padding off				; [AS] Don't pad dc.b
       8/       0 :                     		listing purecode			; [AS] Want listing file, but only the final code in expanded macros
       9/       0 :                     		supmode on 				; [AS] Supervisor mode
      10/       0 :                     		page 0
      11/       0 :                     		
      12/       0 :                     ; ====================================================================
      13/       0 :                     ; ----------------------------------------------------------------
      14/       0 :                     ; Include variables
      15/       0 :                     ; ----------------------------------------------------------------
      16/       0 :                     
      17/       0 :                     		include "system/macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ---------------------------------------------
(1)    8/       0 :                     ; Functions
(1)    9/       0 :                     ; ---------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)				; LLLL RRRR
(1)   12/       0 :                     mapsize		function l,r,( ((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF )	; for cell w/h use doubleword
(1)   13/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)		; Layer,X pos,Y pos for some video routines
(1)   14/       0 :                     
(1)   15/       0 :                     ; ====================================================================
(1)   16/       0 :                     ; ---------------------------------------------
(1)   17/       0 :                     ; Macros
(1)   18/       0 :                     ; ---------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------------------------------
(1)   21/       0 :                     ; Reserve memory space
(1)   22/       0 :                     ; -------------------------------------
(1)   23/       0 :                     
(1)   24/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   25/       0 :                     GLBL_LASTPC	set *
(1)   26/       0 :                     GLBL_LASTORG	set *
(1)   27/       0 :                     		dephase
(1)   28/       0 :                     		phase thisinput
(1)   29/       0 :                     		endm
(1)   30/       0 :                     		
(1)   31/       0 :                     ; -------------------------------------
(1)   32/       0 :                     ; Finish reserve
(1)   33/       0 :                     ; -------------------------------------
(1)   34/       0 :                     
(1)   35/       0 :                     finish		macro				; Then finish
(1)   36/       0 :                     		!org GLBL_LASTORG
(1)   37/       0 :                     		phase GLBL_LASTPC
(1)   38/       0 :                     		endm
(1)   39/       0 :                     
(1)   40/       0 :                     ; -------------------------------------
(1)   41/       0 :                     ; ZERO Fill padding
(1)   42/       0 :                     ; 
(1)   43/       0 :                     ; if AS align doesn't work
(1)   44/       0 :                     ; -------------------------------------
(1)   45/       0 :                     
(1)   46/       0 :                     rompad		macro address			; Zero fill
(1)   47/       0 :                     diff := address - *
(1)   48/       0 :                     		if diff < 0
(1)   49/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)   50/       0 :                     		else
(1)   51/       0 :                     			while diff > 1024
(1)   52/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)   53/       0 :                     				dc.b [1024]0
(1)   54/       0 :                     diff := diff - 1024
(1)   55/       0 :                     			endm
(1)   56/       0 :                     			dc.b [diff]0
(1)   57/       0 :                     		endif
(1)   58/       0 :                     	endm
(1)   59/       0 :                     	
(1)   60/       0 :                     ; -------------------------------------
(1)   61/       0 :                     ; ORG
(1)   62/       0 :                     ;
(1)   63/       0 :                     ; (from s2disasm)
(1)   64/       0 :                     ; -------------------------------------
(1)   65/       0 :                     
(1)   66/       0 : =$0                 paddingSoFar set 0
(1)   67/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   68/       0 :                     org macro address
(1)   69/       0 :                     	if notZ80(MOMCPU)
(1)   70/       0 :                     		if address < *
(1)   71/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   72/       0 :                     		elseif address > *
(1)   73/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   74/       0 :                     			!org address
(1)   75/       0 :                     		endif
(1)   76/       0 :                     	else
(1)   77/       0 :                     		if address < $
(1)   78/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   79/       0 :                     		else
(1)   80/       0 :                     			while address > $
(1)   81/       0 :                     				db 0
(1)   82/       0 :                     			endm
(1)   83/       0 :                     		endif
(1)   84/       0 :                     	endif
(1)   85/       0 :                         endm
(1)   86/       0 :                     
(1)   87/       0 :                     ; ====================================================================
(1)   88/       0 :                     ; ---------------------------------------------
(1)   89/       0 :                     ; Mega CD only
(1)   90/       0 :                     ; ---------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     ; Set a ISO file
(1)   93/       0 :                     ; NOTES:
(1)   94/       0 :                     ; - a valid ISO head is required ($8000 to $B7FF)
(1)   95/       0 :                     ; - currently only the year is set
(1)   96/       0 :                     
(1)   97/       0 :                     ; -----------------------------------------
(1)   98/       0 :                     ; type - 0 or 1
(1)   99/       0 :                     ; start - ISO filelist start point
(1)  100/       0 :                     ; end - ISO filelist end point
(1)  101/       0 :                     ; -----------------------------------------
(1)  102/       0 :                     
(1)  103/       0 :                     iso_setfs	macro type,start,end
(1)  104/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  105/       0 :                     		dc.b 0						; zero
(1)  106/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  107/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  108/       0 :                     		dc.l start>>11					; Start sector, big
(1)  109/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  110/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  111/       0 :                     		dc.l end-start					; Filesize, big
(1)  112/       0 :                     		dc.b (2019-1900)+1				; Year
(1)  113/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  114/       0 :                     		dc.b 2						; File flags
(1)  115/       0 :                     		dc.b 0,0
(1)  116/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  117/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  118/       0 :                     		dc.b 1,type
(1)  119/       0 :                     .fend:
(1)  120/       0 :                     		endm
(1)  121/       0 :                     
(1)  122/       0 :                     ; -----------------------------------------
(1)  123/       0 :                     ; filename - ISO Filename 8.3
(1)  124/       0 :                     ; start - File data start position
(1)  125/       0 :                     ; end - File data end position
(1)  126/       0 :                     ; 
(1)  127/       0 :                     ; Don't forget to pad $800 at the end
(1)  128/       0 :                     ; of each file
(1)  129/       0 :                     ; -----------------------------------------
(1)  130/       0 :                     
(1)  131/       0 :                     iso_file	macro filename,start,end
(1)  132/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  133/       0 :                     		dc.b 0						; zero
(1)  134/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  135/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  136/       0 :                     		dc.l start>>11					; Start sector, big
(1)  137/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  138/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  139/       0 :                     		dc.l end-start					; Filesize, big
(1)  140/       0 :                     		dc.b (2019-1900)+1				; Year
(1)  141/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  142/       0 :                     		dc.b 0						; File flags
(1)  143/       0 :                     		dc.b 0,0
(1)  144/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  145/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  146/       0 :                     		dc.b .flend-.flen
(1)  147/       0 :                     .flen:		dc.b filename,";1"
(1)  148/       0 :                     .flend:		dc.b 0
(1)  149/       0 :                     .fend:
(1)  150/       0 :                     		endm
(1)  151/       0 :                     		
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; ---------------------------------------------
(1)  154/       0 :                     ; 32X only
(1)  155/       0 :                     ; ---------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     ; (later)
(1)  158/       0 :                     
(1)  159/       0 :                     
      18/       0 :                     		include "system/md/const.asm"		; Variables and constants
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Settings
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; If you want to set your RAM structure below $FF8000, you will
(1)    7/       0 :                     ; need to modify the instructions that locate RAM as a WORD:
(1)    8/       0 :                     ; ($8000-$FFFF)
(1)    9/       0 :                     ; 
(1)   10/       0 :                     ; from (ram_label).w to (ram_label).l
(1)   11/       0 :                     
(1)   12/       0 : =$FFFF8000          MDRAM_START	equ	$FFFF8000		; MD RAM Start, keep the first $FF (Available: $FF0000-$FFFFFF)
(1)   13/       0 : =$2000              MAX_LOCRAM	equ	$2000			; Maximum local RAM for the current screen
(1)   14/       0 : =$10                MAX_PRNTLIST	equ	16			; Maximum print values
(1)   15/       0 :                     
(1)   16/       0 : =$7FF               varNullVram	equ	$7FF			; Blank VRAM cell, for some video routines
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ----------------------------------------------------------------
(1)   20/       0 :                     ; Variables
(1)   21/       0 :                     ; ----------------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; System
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     ; vdp_ctrl READ bits
(1)   29/       0 :                     ; ------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$7                 bitVInt 	equ 7			; If a VBlank interrupt started
(1)   32/       0 : =$6                 bitSprOvr	equ 6			; Sprite overflow
(1)   33/       0 : =$5                 bitSprCol	equ 5			; Sprite collision (leftover from MS)
(1)   34/       0 : =$4                 bitOdd		equ 4			; if we are in a Odd frame
(1)   35/       0 : =$3                 bitVBlnk	equ 3			; VBlank
(1)   36/       0 : =$2                 bitHBlnk	equ 2			; HBlank
(1)   37/       0 : =$1                 bitDma		equ 1			; DMA Busy
(1)   38/       0 : =$0                 bitPal		equ 0			; PAL flag (from VDP)
(1)   39/       0 :                     
(1)   40/       0 :                     ; ------------------------------------------------
(1)   41/       0 :                     ; VDP register variables
(1)   42/       0 :                     ; ------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 :                     ; Register $80
(1)   45/       0 : =$2                 HVStop		equ $02
(1)   46/       0 : =$10                HintEnbl	equ $10
(1)   47/       0 : =$1                 bitHVStop	equ 1
(1)   48/       0 : =$4                 bitHintEnbl	equ 4
(1)   49/       0 :                     
(1)   50/       0 :                     ; Register $81
(1)   51/       0 : =$40                DispEnbl 	equ $40
(1)   52/       0 : =$20                VintEnbl 	equ $20
(1)   53/       0 : =$10                DmaEnbl		equ $10
(1)   54/       0 : =$6                 bitDispEnbl	equ 6
(1)   55/       0 : =$5                 bitVintEnbl	equ 5
(1)   56/       0 : =$4                 bitDmaEnbl	equ 4
(1)   57/       0 : =$3                 bitV30		equ 3
(1)   58/       0 :                     	
(1)   59/       0 :                     ; ------------------------------------------------
(1)   60/       0 :                     ; Controller buttons
(1)   61/       0 :                     ; ------------------------------------------------
(1)   62/       0 :                     
(1)   63/       0 : =$1                 JoyUp		equ $0001
(1)   64/       0 : =$2                 JoyDown		equ $0002
(1)   65/       0 : =$4                 JoyLeft		equ $0004
(1)   66/       0 : =$8                 JoyRight	equ $0008
(1)   67/       0 : =$10                JoyB		equ $0010
(1)   68/       0 : =$20                JoyC		equ $0020
(1)   69/       0 : =$40                JoyA		equ $0040
(1)   70/       0 : =$80                JoyStart	equ $0080
(1)   71/       0 : =$100               JoyZ		equ $0100
(1)   72/       0 : =$200               JoyY		equ $0200
(1)   73/       0 : =$400               JoyX		equ $0400
(1)   74/       0 : =$800               JoyMode		equ $0800
(1)   75/       0 :                     
(1)   76/       0 :                     ; right byte only
(1)   77/       0 : =$0                 bitJoyUp	equ 0
(1)   78/       0 : =$1                 bitJoyDown	equ 1
(1)   79/       0 : =$2                 bitJoyLeft	equ 2
(1)   80/       0 : =$3                 bitJoyRight	equ 3
(1)   81/       0 : =$4                 bitJoyB		equ 4
(1)   82/       0 : =$5                 bitJoyC		equ 5
(1)   83/       0 : =$6                 bitJoyA		equ 6
(1)   84/       0 : =$7                 bitJoyStart	equ 7
(1)   85/       0 :                     
(1)   86/       0 :                     ; left byte only
(1)   87/       0 : =$0                 bitJoyZ		equ 0
(1)   88/       0 : =$1                 bitJoyY		equ 1
(1)   89/       0 : =$2                 bitJoyX		equ 2
(1)   90/       0 : =$3                 bitJoyMode	equ 3
(1)   91/       0 :                     
(1)   92/       0 :                     ; ====================================================================
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     ; Structures
(1)   95/       0 :                     ; ----------------------------------------------------------------
(1)   96/       0 :                     
(1)   97/       0 :                     ; Controller
(1)   98/       0 : (MACRO)             		struct 0
(1)   98/       0 : =$0                 GLBL_LASTPC     set *
(1)   98/       0 : =$0                 GLBL_LASTORG    set *
(1)   98/       0 :                                     dephase
(1)   98/       0 :                                     phase 0
(1)   99/       0 :                     pad_id		ds.b 1
(1)  100/       1 :                     pad_ver		ds.b 1
(1)  101/       2 :                     on_hold		ds.w 1
(1)  102/       4 :                     on_press	ds.w 1
(1)  103/       6 :                     sizeof_input	ds.l 0
(1)  104/       8 : (MACRO)             		finish
(1)  104/       0 :                                     !org GLBL_LASTORG
(1)  104/       0 :                                     phase GLBL_LASTPC
(1)  105/       0 :                     
(1)  106/       0 :                     ; ====================================================================
(1)  107/       0 :                     ; ----------------------------------------------------------------
(1)  108/       0 :                     ; Alias
(1)  109/       0 :                     ; ----------------------------------------------------------------
(1)  110/       0 :                     
(1)  111/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)  112/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)  113/       0 :                     
(1)  114/       0 : =$C0000000          VDP_PALETTE	equ $C0000000				; Palette
(1)  115/       0 : =$40000010          VDP_VSRAM	equ $40000010				; Vertical scroll
(1)  116/       0 :                     
(1)  117/       0 :                     ; ====================================================================
(1)  118/       0 :                     ; ----------------------------------------------------------------
(1)  119/       0 :                     ; MD RAM
(1)  120/       0 :                     ; ----------------------------------------------------------------
(1)  121/       0 :                     
(1)  122/       0 :                     ; This looks bad but it works as intended
(1)  123/       0 :                     
(1)  124/       0 : (MACRO)             		struct MDRAM_START		; Set struct at start of our base RAM
(1)  124/       0 : =$0                 GLBL_LASTPC     set *
(1)  124/       0 : =$0                 GLBL_LASTORG    set *
(1)  124/       0 :                                     dephase
(1)  124/FFFFFFFFFFFF8000 :                                     phase MDRAM_START
(1)  125/FFFFFFFFFFFF8000 :                     
(1)  126/FFFFFFFFFFFF8000 :                     	; --------------------------------
(1)  127/FFFFFFFFFFFF8000 :                     	; First pass, empty sizes
(1)  135/FFFFFFFFFFFF8000 :                     	
(1)  136/FFFFFFFFFFFF8000 :                     	; --------------------------------
(1)  137/FFFFFFFFFFFF8000 :                     	; Second pass, sizes are set
(1)  138/FFFFFFFFFFFF8000 :                     RAM_Global	ds.b sizeof_global-RAM_Global
(1)  139/FFFFFFFFFFFF8004 :                     RAM_Local	ds.b MAX_LOCRAM
(1)  140/FFFFFFFFFFFFA004 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  141/FFFFFFFFFFFFA010 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  142/FFFFFFFFFFFFA08A :                     sizeof_mdram	ds.l 0
(1)  144/FFFFFFFFFFFFA08C :                     	
(1)  145/FFFFFFFFFFFFA08C :                     	; --------------------------------
(1)  146/FFFFFFFFFFFFA08C :                     	; Report RAM usage on pass 5
MD RAM ends at: FFA08A
(1)  148/FFFFFFFFFFFFA08C :                     		message "MD RAM ends at: \{((sizeof_mdram)&$FFFFFF)}"
(1)  150/FFFFFFFFFFFFA08C : (MACRO)             		finish
(1)  150/FFFFFFFFFFFF8000 :                                     !org GLBL_LASTORG
(1)  150/       0 :                                     phase GLBL_LASTPC
(1)  151/       0 :                     
(1)  152/       0 :                     ; ====================================================================
(1)  153/       0 :                     ; ----------------------------------------------------------------
(1)  154/       0 :                     ; System RAM
(1)  155/       0 :                     ; ----------------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 : (MACRO)             		struct RAM_MdSystem
(1)  157/       0 : =$0                 GLBL_LASTPC     set *
(1)  157/       0 : =$0                 GLBL_LASTORG    set *
(1)  157/       0 :                                     dephase
(1)  157/FFFFFFFFFFFFA004 :                                     phase RAM_MDSYSTEM
(1)  158/FFFFFFFFFFFFA004 :                     RAM_InputData	ds.b sizeof_input*2			; 2 controller buffers
(1)  159/FFFFFFFFFFFFA010 :                     sizeof_mdsys	ds.l 0
(1)  160/FFFFFFFFFFFFA010 : (MACRO)             		finish
(1)  160/FFFFFFFFFFFFA004 :                                     !org GLBL_LASTORG
(1)  160/       0 :                                     phase GLBL_LASTPC
(1)  161/       0 :                     		
(1)  162/       0 :                     ; ====================================================================
(1)  163/       0 :                     ; ----------------------------------------------------------------
(1)  164/       0 :                     ; Video cache RAM
(1)  165/       0 :                     ; ----------------------------------------------------------------
(1)  166/       0 :                     
(1)  167/       0 : (MACRO)             		struct RAM_MdVideo
(1)  167/       0 : =$0                 GLBL_LASTPC     set *
(1)  167/       0 : =$0                 GLBL_LASTORG    set *
(1)  167/       0 :                                     dephase
(1)  167/FFFFFFFFFFFFA010 :                                     phase RAM_MDVIDEO
(1)  168/FFFFFFFFFFFFA010 :                     RAM_VdpCache	ds.b 24				; List of VDP register data copies
(1)  169/FFFFFFFFFFFFA028 :                     RAM_VidPrntList	ds.w MAX_PRNTLIST*3		; VDP address (2 WORDS), value type (WORD)
(1)  170/FFFFFFFFFFFFA088 :                     RAM_VidPrntVram	ds.w 1				; Current VRAM address for the Print routines
(1)  171/FFFFFFFFFFFFA08A :                     sizeof_mdvid	ds.l 0
(1)  172/FFFFFFFFFFFFA08C : (MACRO)             		finish
(1)  172/FFFFFFFFFFFFA010 :                                     !org GLBL_LASTORG
(1)  172/       0 :                                     phase GLBL_LASTPC
(1)  173/       0 :                     		
(1)  174/       0 :                     ; ====================================================================
(1)  175/       0 :                     ; ----------------------------------------------------------------
(1)  176/       0 :                     ; Sound buffer RAM (68k and Z80)
(1)  177/       0 :                     ; ----------------------------------------------------------------
(1)  178/       0 :                     
(1)  179/       0 :                     ; 		struct RAM_MdSound
(1)  180/       0 :                     ; 		finish
(1)  181/       0 :                     
(1)  182/       0 :                     ; ====================================================================
(1)  183/       0 :                     
      19/       0 :                     		include "system/md/map.asm"		; Memory map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Mega drive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; External RAM
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU RAM, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 Reg 1, channels 1-3
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 Reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 Reg 1, channels 4-6
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 Reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A14000            sys_tmss	equ	$A14000		; Write "SEGA" here if ver > 0
(1)   20/       0 : =$A11100            z80_bus 	equ	$A11100		; Only use bit 0 (bit 8 as WORD)
(1)   21/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   22/       0 : =$A130EC            md_mars_id	equ	$A130EC		; MARS ID "MARS"
(1)   23/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   24/       0 : =$C00000            vdp_data	equ	$C00000		; Video data port (mirror: $C00002)
(1)   25/       0 : =$C00004            vdp_ctrl	equ	$C00004		; Video control port (mirror: $C00006)
(1)   26/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG Sound port
(1)   27/       0 :                     
(1)   28/       0 :                     ; ----------------------------------------------------------------
(1)   29/       0 :                     ; Genesis / Mega drive Z80 map
(1)   30/       0 :                     ; ----------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   33/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   34/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   35/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   36/       0 : =$6000              zbank		equ	$6000		; ROM BANK 24bits %XXXXXXXX X0000000 00000000
(1)   37/       0 : =$7F00              zvdp_data	equ	$7F00		; Video data port
(1)   38/       0 : =$7F04              zvdp_ctrl	equ	$7F04		; Video control port
(1)   39/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; If a SEGA CD is attached
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$20000             syscd_prgram	equ	$020000		; SubCPU PRG-RAM, up to $1FFFF, banked
(1)   46/       0 : =$200000            syscd_wordram	equ	$200000		; WORD-RAM seen in MAIN-CPU
(1)   47/       0 : =$A12000            syscd_bus	equ	$A12000		; WORD | Sub-CPU BUS/RESET
(1)   48/       0 : =$A12003            syscd_memory	equ	$A12003		; BYTE | Sub-CPU memory mode
(1)   49/       0 : =$A12004            syscd_cdcmode	equ	$A12004		; WORD | CDC Mode
(1)   50/       0 : =$A12006            syscd_hint	equ	$A12006		; WORD | VDP HBlank jump ($FFxxxx)
(1)   51/       0 : =$A12008            syscd_cdchost	equ	$A12008		; WORD | CDC Host
(1)   52/       0 : =$A12008            syscd_stopwtch	equ	$A12008		; WORD | Stopwatch
(1)   53/       0 : =$A1200E            syscd_comm_m	equ	$A1200E		; BYTE | MainCPU R/W comm byte
(1)   54/       0 : =$A1200F            syscd_comm_s	equ	$A1200F		; BYTE | Sub-CPU Read comm byte
(1)   55/       0 : =$A12010            syscd_args_m	equ	$A12010		; DATA | Comm R/W list, max size: $E
(1)   56/       0 : =$A12020            syscd_args_s	equ	$A12020		; DATA | Comm Read list, max size: $E
(1)   57/       0 :                     
(1)   58/       0 :                     ; ----------------------------------------------------------------
(1)   59/       0 :                     ; If a 32X is attached
(1)   60/       0 :                     ; ----------------------------------------------------------------
(1)   61/       0 :                     
(1)   62/       0 : =$A130EC            sysmars_ID	equ	$A130EC		; MARS ID "MARS"
(1)   63/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X buffer (check for mars_ID first)
(1)   64/       0 :                     
      20/       0 :                     		include "game/global.asm"		; Global variables and RAM
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Put your global structs/values here
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Structures
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; ====================================================================
(1)   12/       0 :                     ; --------------------------------------------------------
(1)   13/       0 :                     ; RAM
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     
(1)   16/       0 :                     ; ds.b numof_bytes
(1)   17/       0 :                     ; ds.w numof_words (2 bytes)
(1)   18/       0 :                     ; ds.l numof_longs (4 bytes)
(1)   19/       0 : (MACRO)             		struct RAM_Global
(1)   19/       0 : =$0                 GLBL_LASTPC     set *
(1)   19/       0 : =$0                 GLBL_LASTORG    set *
(1)   19/       0 :                                     dephase
(1)   19/FFFFFFFFFFFF8000 :                                     phase RAM_GLOBAL
(1)   20/FFFFFFFFFFFF8000 :                     RAM_GlblNull	ds.l 1
(1)   21/FFFFFFFFFFFF8004 :                     sizeof_global	ds.l 0
(1)   22/FFFFFFFFFFFF8004 : (MACRO)             		finish
(1)   22/FFFFFFFFFFFF8000 :                                     !org GLBL_LASTORG
(1)   22/       0 :                                     phase GLBL_LASTPC
(1)   23/       0 :                     		
(1)   24/       0 :                     
      21/       0 :                     
      22/       0 :                     ; ====================================================================
      23/       0 :                     ; ----------------------------------------------------------------
      24/       0 :                     ; Header
      25/       0 :                     ; ----------------------------------------------------------------
      26/       0 :                     
      27/       0 :                     		include "system/head.asm"		; Header and initialization
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEAD
(1)    4/       0 :                     ; 
(1)    5/       0 :                     ; Genesis
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point (at end of RAM, goes backwards)
(1)    9/       4 : 0000 0202           		dc.l MD_Entry			; Entry point
(1)   10/       8 : 0000 0200           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0200           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0200           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0200           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0200           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0200           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0200           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0200           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0200           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0200           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0200           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0200           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0200           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0200           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0200           		dc.l MD_ErrorEx	
(1)   25/      44 : 0000 0200           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0200           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0200           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0200           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0200           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0200           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0200           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0200           		dc.l MD_ErrorEx		
(1)   33/      64 : 0000 0200           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0200           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0200           		dc.l MD_ErrorTrap
(1)   36/      70 : 0000 28BC           		dc.l MD_HBlank			; VDP HBlank interrupt
(1)   37/      74 : 0000 0200           		dc.l MD_ErrorTrap
(1)   38/      78 : 0000 292C           		dc.l MD_VBlank			; VDP VBlank interrupt
(1)   39/      7C : 0000 0200           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0200           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0200           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0200           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0200           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0200           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0200           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0200           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0200           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0200           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0200           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0200           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0200           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0200           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0200           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0200           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0200           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0200           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2047 454E 		dc.b "SEGA GENESIS    "					; System name, the "SEGA" word is required
                    4553 4953 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2020.DEC"					; "(C)[company] [year].[month]"
                    3230 3230 2E44 4543 
(1)   74/     120 : 4745 4D41 2070 6572 		dc.b "GEMA pero que se parece a GEMS                  " ; Your game title in your country
                    6F20 7175 6520 7365 
                    2070 6172 6563 6520 
                    6120 4745 4D53 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 4745 4D41 2053 6F75 		dc.b "GEMA Sound Engine tester                        "	; Your game title outside of your country
                    6E64 2045 6E67 696E 
                    6520 7465 7374 6572 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2030 3030 3030 		dc.b "GM 00000000-00"					; Serial number and version
                    3030 302D 3030      
(1)   77/     18E : 0000                		dc.w 0							; Checksum, leave it zero if not needed
(1)   78/     190 : 4A20 2020 2020 2020 		dc.b "J               "					; Peripherals supported, "J" is 3-button controller
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0							; ROM Start address, always 0
(1)   80/     1A4 : 0024 DD03           		dc.l ROM_END-1						; ROM End address - 1
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000						; RAM Start address, always $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF						; RAM Start address, always $FFFFFF
(1)   83/     1B0 : 5241 F820           		dc.b "RA",$F8,$20
(1)   84/     1B4 : 0020 0001           		dc.l $200001
(1)   85/     1B8 : 0020 FFFF           		dc.l $20FFFF
(1)   86/     1BC : 2020 2020           		dc.l $20202020						; Modem data, not used
(1)   87/     1C0 : 2020 2020           		dc.l $20202020
(1)   88/     1C4 : 2020 2020           		dc.l $20202020
(1)   89/     1C8 : 2020 2020 2020 2020 		dc.b "                                        "		; Memo
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   90/     1F0 : 4A55 4520 2020 2020 		dc.b "JUE             "					; Allowed regions: Japan, United states and Europe
                    2020 2020 2020 2020 
(1)   91/     200 :                     
(1)   92/     200 :                     ; ====================================================================
(1)   93/     200 :                     ; ----------------------------------------------------------------
(1)   94/     200 :                     ; Error handlers
(1)   95/     200 :                     ; 
(1)   96/     200 :                     ; all these do nothing currently
(1)   97/     200 :                     ; ----------------------------------------------------------------
(1)   98/     200 :                     
(1)   99/     200 :                     MD_ErrBus:				; Bus error
(1)  100/     200 :                     MD_ErrAddr:				; Address error
(1)  101/     200 :                     MD_ErrIll:				; ILLEGAL Instruction
(1)  102/     200 :                     MD_ErrZDiv:				; Divide by 0
(1)  103/     200 :                     MD_ErrChk:				; CHK Instruction
(1)  104/     200 :                     MD_ErrTrapV:				; TRAPV Instruction
(1)  105/     200 :                     MD_ErrPrivl:				; Privilege violation
(1)  106/     200 :                     MD_Trace:				; Trace
(1)  107/     200 :                     MD_Line1010:				; Line 1010 Emulator
(1)  108/     200 :                     MD_Line1111:				; Line 1111 Emulator
(1)  109/     200 :                     MD_ErrorEx:				; Error exception
(1)  110/     200 :                     MD_ErrorTrap:
(1)  111/     200 : 4E73                		rte			; Return from Exception
(1)  112/     202 :                     
(1)  113/     202 :                     ; ====================================================================
(1)  114/     202 :                     ; ----------------------------------------------------------------
(1)  115/     202 :                     ; Entry point
(1)  116/     202 :                     ; ----------------------------------------------------------------
(1)  117/     202 :                     
(1)  118/     202 :                     MD_Entry:
(1)  119/     202 :                     	; --------------------------------
(1)  120/     202 :                     	; Check if the system has TMSS
(1)  121/     202 : 46FC 2700           		move	#$2700,sr			; Disable interrputs
(1)  122/     206 : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Read IO port
(1)  123/     20C : 0200 000F           		andi.b	#%1111,d0			; Get version, right 4 bits
(1)  124/     210 : 670A                		beq.s	.oldmd				; If == 0, skip this part
(1)  125/     212 : 23F9 0000 0100 00A1 		move.l	($100).l,(sys_tmss).l		; Write "SEGA" to port sys_tmss
                    4000                
(1)  126/     21C :                     .oldmd:
(1)  127/     21C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l			; Random VDP test, to unlock it
(1)  128/     222 :                     		
(1)  129/     222 :                     	; --------------------------------
(1)  130/     222 : 7000                		moveq	#0,d0				; d0 = 0
(1)  131/     224 : 2C40                		movea.l	d0,a6				; a6 = d0
(1)  132/     226 : 4E66                		move.l	a6,usp				; move a6 to usp
(1)  133/     228 : 3039 00C0 0004      .waitframe:	move.w	(vdp_ctrl).l,d0			; Wait for VBlank
(1)  134/     22E : 0800 0007           		btst	#bitVint,d0
(1)  135/     232 : 67F4                		beq.s	.waitframe
(1)  136/     234 : 23FC 8004 8144 00C0 		move.l	#$80048144,(vdp_ctrl).l		; VDP: Set special bits, and keep Display (TMSS screen stays on)
                    0004                
(1)  137/     23E : 41F9 FFFF 0000      		lea	($FFFF0000),a0			; a0 - RAM Address
(1)  138/     244 : 303C 3BFF           		move.w	#($F000/4)-1,d0			; d0 - Bytes to clear / 4, minus 1
(1)  139/     248 :                     .clrram:
(1)  140/     248 : 4298                		clr.l	(a0)+				; Clear 4 bytes, and increment by 4
(1)  141/     24A : 51C8 FFFC           		dbf	d0,.clrram			; Loop until d0 == 0
(1)  142/     24E : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6			; Trick: Grab clean RAM memory to clear all registers except a7 (Stack point)
(1)  143/     256 : 6000 2666           		bra	MD_Main				; Branch to MD_Main
(1)  144/     25A :                     
      28/     25A :                     
      29/     25A :                     ; ====================================================================
      30/     25A :                     ; CODE Section
      31/     25A :                     ; ====================================================================
      32/     25A :                     
      33/     25A :                     ; ====================================================================
      34/     25A :                     ; ----------------------------------------------------------------
      35/     25A :                     ; System functions
      36/     25A :                     ; ----------------------------------------------------------------
      37/     25A :                     
      38/     25A :                     		include "system/md/sound/main.asm"	; Sound
(1)    1/     25A :                     ; ====================================================================
(1)    2/     25A :                     ; ----------------------------------------------------------------
(1)    3/     25A :                     ; MD Sound
(1)    4/     25A :                     ; ----------------------------------------------------------------
(1)    5/     25A :                     
(1)    6/     25A :                     ; ====================================================================
(1)    7/     25A :                     ; ----------------------------------------------------------------
(1)    8/     25A :                     ; Z80 Code
(1)    9/     25A :                     ; ----------------------------------------------------------------
(1)   10/     25A :                     
(1)   11/     25A :                     		align $100
(1)   12/     300 :                     Z80_CODE:
(1)   13/     300 :                     		cpu Z80				; [AS] Set to Z80
(1)   14/       0 :                     		phase 0				; [AS] Reset PC to zero, for this section
(1)   15/       0 :                     		
(1)   16/       0 :                     ; ====================================================================
(1)   17/       0 :                     ; Z80 goes here
(1)   18/       0 :                     
(1)   19/       0 :                     		include "system/md/sound/z80.asm"
(2)    1/       0 :                     ; ====================================================================
(2)    2/       0 :                     ; ----------------------------------------------------------------
(2)    3/       0 :                     ; GEMA sound driver, inspired by GEMS
(2)    4/       0 :                     ; 
(2)    5/       0 :                     ; WARNING: any code change will desync the sample rate and
(2)    6/       0 :                     ; you will need to manually re-sync it.
(2)    7/       0 :                     ; 
(2)    8/       0 :                     ; DAC sample rate is 16000hz base, minimal frequency changes
(2)    9/       0 :                     ; ----------------------------------------------------------------
(2)   10/       0 :                     
(2)   11/       0 :                     ; --------------------------------------------------------
(2)   12/       0 :                     ; Variables
(2)   13/       0 :                     ; --------------------------------------------------------
(2)   14/       0 :                     
(2)   15/       0 :                     ; To brute force DAC playback on/off
(2)   16/       0 : =8H                 zopcEx		equ	08h
(2)   17/       0 : =0H                 zopcNop		equ	00h
(2)   18/       0 : =C9H                zopcRet		equ 	0C9h
(2)   19/       0 : =D9H                zopcExx		equ	0D9h			; (dac_me ONLY)
(2)   20/       0 : =F5H                zopcPushAf	equ	0F5h			; (dac_fill ONLY)
(2)   21/       0 :                     
(2)   22/       0 :                     ; PSG control 
(2)   23/       0 : =0H                 COM		equ	0
(2)   24/       0 : =4H                 LEV		equ	4
(2)   25/       0 : =8H                 ATK		equ	8
(2)   26/       0 : =CH                 DKY		equ	12
(2)   27/       0 : =10H                SLV		equ	16
(2)   28/       0 : =14H                RRT		equ	20
(2)   29/       0 : =18H                MODE		equ	24
(2)   30/       0 : =1CH                DTL		equ	28
(2)   31/       0 : =20H                DTH		equ	32
(2)   32/       0 : =24H                ALV		equ	36
(2)   33/       0 : =28H                FLG		equ	40
(2)   34/       0 :                     			      
(2)   35/       0 :                     ; --------------------------------------------------------
(2)   36/       0 :                     ; Macros
(2)   37/       0 :                     ; --------------------------------------------------------
(2)   38/       0 :                     
(2)   39/       0 :                     ; only uses A
(2)   40/       0 :                     dacStream	macro option
(2)   41/       0 :                     	if option==True
(2)   42/       0 :                     		ld	a,2Bh
(2)   43/       0 :                     		ld	(Zym_ctrl_1),a
(2)   44/       0 :                     		ld	a,80h
(2)   45/       0 :                     		ld	(Zym_data_1),a
(2)   46/       0 :                     		ld 	a,zopcExx
(2)   47/       0 :                     		ld	(dac_me),a
(2)   48/       0 :                     		ld 	a,zopcPushAf
(2)   49/       0 :                     		ld	(dac_fill),a
(2)   50/       0 :                     	else
(2)   51/       0 :                     		ld	a,2Bh
(2)   52/       0 :                     		ld	(Zym_ctrl_1),a
(2)   53/       0 :                     		ld	a,00h
(2)   54/       0 :                     		ld	(Zym_data_1),a
(2)   55/       0 :                     		ld 	a,zopcRet
(2)   56/       0 :                     		ld	(dac_me),a
(2)   57/       0 :                     		ld 	a,zopcRet
(2)   58/       0 :                     		ld	(dac_fill),a
(2)   59/       0 :                     	endif
(2)   60/       0 :                     		endm
(2)   61/       0 :                     		
(2)   62/       0 :                     ; ====================================================================
(2)   63/       0 :                     
(2)   64/       0 : F3                  		di				; Disable interrputs
(2)   65/       1 : ED 56               		im	1			; Interrupt mode 1
(2)   66/       3 : 31 00 20            		ld	sp,2000h		; Set stack at the end of Z80
(2)   67/       6 : 18 36               		jr	z80_init		; Jump to z80_init
(2)   68/       8 :                     		
(2)   69/       8 : 00 00               testval1	dw 0
(2)   70/       A : 00 00               testval2	dw 0
(2)   71/       C :                     
(2)   72/       C :                     ; --------------------------------------------------------
(2)   73/       C :                     ; Z80 Interrupt at 0038h
(2)   74/       C :                     ; 
(2)   75/       C :                     ; Requests a TICK
(2)   76/       C :                     ; --------------------------------------------------------
(2)   77/       C :                     
(2)   78/       C : (MACRO)             		org 0038h			; Align to 0038h
(2)   78/       C : 00                                                  db 0
(2)   78/       D : 00                                                  db 0
(2)   78/       E : 00                                                  db 0
(2)   78/       F : 00                                                  db 0
(2)   78/      10 : 00                                                  db 0
(2)   78/      11 : 00                                                  db 0
(2)   78/      12 : 00                                                  db 0
(2)   78/      13 : 00                                                  db 0
(2)   78/      14 : 00                                                  db 0
(2)   78/      15 : 00                                                  db 0
(2)   78/      16 : 00                                                  db 0
(2)   78/      17 : 00                                                  db 0
(2)   78/      18 : 00                                                  db 0
(2)   78/      19 : 00                                                  db 0
(2)   78/      1A : 00                                                  db 0
(2)   78/      1B : 00                                                  db 0
(2)   78/      1C : 00                                                  db 0
(2)   78/      1D : 00                                                  db 0
(2)   78/      1E : 00                                                  db 0
(2)   78/      1F : 00                                                  db 0
(2)   78/      20 : 00                                                  db 0
(2)   78/      21 : 00                                                  db 0
(2)   78/      22 : 00                                                  db 0
(2)   78/      23 : 00                                                  db 0
(2)   78/      24 : 00                                                  db 0
(2)   78/      25 : 00                                                  db 0
(2)   78/      26 : 00                                                  db 0
(2)   78/      27 : 00                                                  db 0
(2)   78/      28 : 00                                                  db 0
(2)   78/      29 : 00                                                  db 0
(2)   78/      2A : 00                                                  db 0
(2)   78/      2B : 00                                                  db 0
(2)   78/      2C : 00                                                  db 0
(2)   78/      2D : 00                                                  db 0
(2)   78/      2E : 00                                                  db 0
(2)   78/      2F : 00                                                  db 0
(2)   78/      30 : 00                                                  db 0
(2)   78/      31 : 00                                                  db 0
(2)   78/      32 : 00                                                  db 0
(2)   78/      33 : 00                                                  db 0
(2)   78/      34 : 00                                                  db 0
(2)   78/      35 : 00                                                  db 0
(2)   78/      36 : 00                                                  db 0
(2)   78/      37 : 00                                                  db 0
(2)   78/      38 :                     
(2)   79/      38 : ED 73 60 0D         		ld	(tickFlag),sp		; Use sp to set TICK request (Sets xx1F)
(2)   80/      3C : F3                  		di				; Disable interrupt until next request
(2)   81/      3D : C9                  		ret
(2)   82/      3E :                     
(2)   83/      3E :                     ; --------------------------------------------------------
(2)   84/      3E :                     ; Initilize
(2)   85/      3E :                     ; --------------------------------------------------------
(2)   86/      3E :                     
(2)   87/      3E :                     z80_init:
(2)   88/      3E : CD 03 01            		call	gema_init		; Initilize VBLANK sound driver
(2)   89/      41 : CD E7 03            		call	dac_play
(2)   90/      44 : FB                  		ei
(2)   91/      45 :                     		
(2)   92/      45 :                     ; --------------------------------------------------------
(2)   93/      45 :                     ; MAIN LOOP
(2)   94/      45 :                     ; --------------------------------------------------------
(2)   95/      45 :                     
(2)   96/      45 :                     drv_loop:
(2)   97/      45 : CD 23 04            		call	dac_me
(2)   98/      48 : CD 90 01            		call	check_tick		; Check for tick on VBlank
(2)   99/      4B : CD 37 04            		call	dac_fill
(2)  100/      4E : CD 23 04            		call	dac_me
(2)  101/      51 :                     
(2)  102/      51 :                     	; Check for tick and tempo	
(2)  103/      51 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(2)  104/      53 : 3A 62 0D            		ld	a,(tickCnt)		
(2)  105/      56 : D6 01               		sub	1
(2)  106/      58 : 38 0B               		jr	c,.noticks
(2)  107/      5A : 32 62 0D            		ld	(tickCnt),a
(2)  108/      5D : CD B7 02            		call	psg_env			; Do PSG effects
(2)  109/      60 : CD 90 01            		call	check_tick		; Check for another tick
(2)  110/      63 : 06 01               		ld 	b,1			; Set TICK (01b) flag
(2)  111/      65 :                     .noticks:
(2)  112/      65 : CD 23 04            		call	dac_me
(2)  113/      68 : 3A 66 0D            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(2)  114/      6B : D6 01               		sub	1
(2)  115/      6D : 38 0E               		jr	c,.nobeats
(2)  116/      6F : 32 66 0D            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(2)  117/      72 : CB C8               		set	1,b			; Set BEAT (10b) flag
(2)  118/      74 : CD 23 04            		call	dac_me			; painful desync here, play 3 WAV bytes
(2)  119/      77 : CD 23 04            		call	dac_me
(2)  120/      7A : CD 23 04            		call	dac_me
(2)  121/      7D :                     .nobeats:
(2)  122/      7D : 78                  		ld	a,b
(2)  123/      7E : B7                  		or	a
(2)  124/      7F : 28 0F               		jr	z,.neithertick
(2)  125/      81 : CD 23 04            		call	dac_me
(2)  126/      84 : 32 67 0D            		ld	(currTickBits),a	; Save bits
(2)  127/      87 :                     ; 		call	doenvelope
(2)  128/      87 : CD 90 01            		call	check_tick
(2)  129/      8A :                     ; 		call	vtimer
(2)  130/      8A : CD 90 01            		call	check_tick
(2)  131/      8D :                     ; 		call	updseq
(2)  132/      8D : CD 90 01            		call	check_tick
(2)  133/      90 :                     ; 
(2)  134/      90 :                     .neithertick:
(2)  135/      90 :                     ; 		call	apply_bend
(2)  136/      90 :                     ; 		ld	b,7
(2)  137/      90 :                     ; 		djnz	$
(2)  138/      90 :                     ; 		call	dac_me
(2)  139/      90 :                     
(2)  140/      90 : 3A 72 0D            		ld	a,(commZWrite)
(2)  141/      93 : 47                  		ld	b,a
(2)  142/      94 : 3A 71 0D            		ld	a,(commZRead)
(2)  143/      97 : B8                  		cp	b
(2)  144/      98 : CA 45 00            		jp	z,drv_loop
(2)  145/      9B :                     
(2)  146/      9B :                     	; Get 0FFh (Start of command)
(2)  147/      9B : CD 69 01            		call	get_cmdbyte		; read cmd from CMDFIFO
(2)  148/      9E : FE FF               		cp	-1
(2)  149/      A0 : C2 45 00            		jp	nz,drv_loop
(2)  150/      A3 : CD 69 01            		call	get_cmdbyte
(2)  151/      A6 : 21 B8 00            		ld	hl,.list
(2)  152/      A9 : 16 00               		ld	d,0
(2)  153/      AB : 5F                  		ld	e,a
(2)  154/      AC : 19                  		add	hl,de
(2)  155/      AD : CD 23 04            		call	dac_me
(2)  156/      B0 : CD 37 04            		call	dac_fill
(2)  157/      B3 : 7E                  		ld	a,(hl)
(2)  158/      B4 : 23                  		inc	hl
(2)  159/      B5 : 66                  		ld	h,(hl)
(2)  160/      B6 : 6F                  		ld	l,a
(2)  161/      B7 : E9                  		jp	(hl)
(2)  162/      B8 :                     .list:
(2)  163/      B8 : FE 00               		dw .cmnd_0
(2)  164/      BA : FE 00               		dw .cmnd_0
(2)  165/      BC : FE 00               		dw .cmnd_0
(2)  166/      BE : FE 00               		dw .cmnd_0
(2)  167/      C0 : FE 00               		dw .cmnd_0
(2)  168/      C2 : FE 00               		dw .cmnd_0
(2)  169/      C4 : FE 00               		dw .cmnd_0
(2)  170/      C6 : FE 00               		dw .cmnd_0
(2)  171/      C8 : FE 00               		dw .cmnd_0
(2)  172/      CA : FE 00               		dw .cmnd_0
(2)  173/      CC : FE 00               		dw .cmnd_0
(2)  174/      CE : FE 00               		dw .cmnd_0
(2)  175/      D0 : FE 00               		dw .cmnd_0
(2)  176/      D2 : FE 00               		dw .cmnd_0
(2)  177/      D4 : FE 00               		dw .cmnd_0
(2)  178/      D6 : FE 00               		dw .cmnd_0
(2)  179/      D8 : FE 00               		dw .cmnd_0
(2)  180/      DA : FE 00               		dw .cmnd_0
(2)  181/      DC : FE 00               		dw .cmnd_0
(2)  182/      DE : FE 00               		dw .cmnd_0
(2)  183/      E0 : FE 00               		dw .cmnd_0
(2)  184/      E2 : FE 00               		dw .cmnd_0
(2)  185/      E4 : FE 00               		dw .cmnd_0
(2)  186/      E6 : FE 00               		dw .cmnd_0
(2)  187/      E8 : FE 00               		dw .cmnd_0
(2)  188/      EA : FE 00               		dw .cmnd_0
(2)  189/      EC : FE 00               		dw .cmnd_0
(2)  190/      EE : FE 00               		dw .cmnd_0
(2)  191/      F0 : FE 00               		dw .cmnd_0
(2)  192/      F2 : FE 00               		dw .cmnd_0
(2)  193/      F4 : FE 00               		dw .cmnd_0
(2)  194/      F6 : FE 00               		dw .cmnd_0
(2)  195/      F8 : FE 00               		dw .cmnd_0
(2)  196/      FA : FE 00               		dw .cmnd_0
(2)  197/      FC : FE 00               		dw .cmnd_0
(2)  198/      FE :                     
(2)  199/      FE :                     ; --------------------------------------------------------
(2)  200/      FE :                     ; Command list
(2)  201/      FE :                     ; --------------------------------------------------------
(2)  202/      FE :                     
(2)  203/      FE :                     .cmnd_0:
(2)  204/      FE : 18 FE               		jr	$
(2)  205/     100 : C3 45 00            		jp	drv_loop
(2)  206/     103 :                     		
(2)  207/     103 :                     ; 		call	dac_me
(2)  208/     103 :                     ; 		call	dac_fill
(2)  209/     103 :                     ; 		call	dac_me
(2)  210/     103 :                     ; 		ld	b,7		; codigo va
(2)  211/     103 :                     ; 		djnz	$		; aqui
(2)  212/     103 :                     
(2)  213/     103 :                     ; ====================================================================
(2)  214/     103 :                     ; ----------------------------------------------------------------
(2)  215/     103 :                     ; Sound playback code
(2)  216/     103 :                     ; ----------------------------------------------------------------
(2)  217/     103 :                     
(2)  218/     103 :                     ; --------------------------------------------------------
(2)  219/     103 :                     ; Init sound engine
(2)  220/     103 :                     ; --------------------------------------------------------
(2)  221/     103 :                     
(2)  222/     103 :                     gema_init:
(2)  223/     103 : (MACRO)             		dacStream False
(2)  223/     103 : 3E 2B                               ld      a,2Bh
(2)  223/     105 : 32 00 40                            ld      (Zym_ctrl_1),a
(2)  223/     108 : 3E 00                               ld      a,00h
(2)  223/     10A : 32 01 40                            ld      (Zym_data_1),a
(2)  223/     10D : 3E C9                               ld      a,zopcRet
(2)  223/     10F : 32 23 04                            ld      (dac_me),a
(2)  223/     112 : 3E C9                               ld      a,zopcRet
(2)  223/     114 : 32 37 04                            ld      (dac_fill),a
(2)  224/     117 : 3E 9F               		ld	a,09Fh
(2)  225/     119 : 32 11 7F            		ld	(Zpsg_ctrl),a
(2)  226/     11C : 3E BF               		ld	a,0BFh
(2)  227/     11E : 32 11 7F            		ld	(Zpsg_ctrl),a		
(2)  228/     121 : 3E DF               		ld	a,0DFh
(2)  229/     123 : 32 11 7F            		ld	(Zpsg_ctrl),a	
(2)  230/     126 : 3E FF               		ld	a,0FFh
(2)  231/     128 : 32 11 7F            		ld	(Zpsg_ctrl),a
(2)  232/     12B : 11 00 27            		ld	de,2700h
(2)  233/     12E : CD A1 02            		call	SndDrv_FmSet_1
(2)  234/     131 : 11 00 28            		ld	de,2800h
(2)  235/     134 : CD A1 02            		call	SndDrv_FmSet_1
(2)  236/     137 : 11 01 28            		ld	de,2801h
(2)  237/     13A : CD A1 02            		call	SndDrv_FmSet_1
(2)  238/     13D : 11 02 28            		ld	de,2802h
(2)  239/     140 : CD A1 02            		call	SndDrv_FmSet_1
(2)  240/     143 : 11 04 28            		ld	de,2804h
(2)  241/     146 : CD A1 02            		call	SndDrv_FmSet_1
(2)  242/     149 : 11 05 28            		ld	de,2805h
(2)  243/     14C : CD A1 02            		call	SndDrv_FmSet_1
(2)  244/     14F : 11 06 28            		ld	de,2806h
(2)  245/     152 : CD A1 02            		call	SndDrv_FmSet_1
(2)  246/     155 : 11 00 2B            		ld	de,2B00h
(2)  247/     158 : CD A1 02            		call	SndDrv_FmSet_1	
(2)  248/     15B : 21 00 0C            		ld	hl,dWaveBuff			; Initilize WAVE FIFO
(2)  249/     15E : 11 01 0C            		ld	de,dWaveBuff+1
(2)  250/     161 : 01 FF 00            		ld	bc,100h-1
(2)  251/     164 : 36 80               		ld	(hl),80h
(2)  252/     166 : ED B0               		ldir
(2)  253/     168 : C9                  		ret
(2)  254/     169 :                     
(2)  255/     169 :                     apply_bend:
(2)  256/     169 :                     
(2)  257/     169 :                     ; ====================================================================
(2)  258/     169 :                     ; ----------------------------------------------------------------
(2)  259/     169 :                     ; Subroutines
(2)  260/     169 :                     ; ----------------------------------------------------------------
(2)  261/     169 :                     
(2)  262/     169 :                     get_cmdbyte:
(2)  263/     169 : C5                  		push	bc
(2)  264/     16A : E5                  		push	hl
(2)  265/     16B :                     .getcbytel:
(2)  266/     16B : CD 23 04            		call	dac_me
(2)  267/     16E : CD 37 04            		call	dac_fill
(2)  268/     171 : 3A 72 0D            		ld	a,(commZWrite)
(2)  269/     174 : 47                  		ld	b,a
(2)  270/     175 : 3A 71 0D            		ld	a,(commZRead)
(2)  271/     178 : B8                  		cp	b
(2)  272/     179 : CA 6B 01            		jp	z,.getcbytel		; wait for a command from 68k
(2)  273/     17C : 06 00               		ld	b,0
(2)  274/     17E : 4F                  		ld	c,a
(2)  275/     17F : 21 00 0D            		ld	hl,cmdfifo
(2)  276/     182 : CD 23 04            		call	dac_me
(2)  277/     185 : 09                  		add	hl,bc
(2)  278/     186 : 3C                  		inc	a
(2)  279/     187 : E6 3F               		and	3Fh			; limit to 64
(2)  280/     189 : 32 71 0D            		ld	(commZRead),a
(2)  281/     18C : 7E                  		ld	a,(hl)
(2)  282/     18D : E1                  		pop	hl
(2)  283/     18E : C1                  		pop	bc
(2)  284/     18F : C9                  		ret
(2)  285/     190 :                     			      
(2)  286/     190 :                     ; --------------------------------------------------------
(2)  287/     190 :                     ; check_tick
(2)  288/     190 :                     ; 
(2)  289/     190 :                     ; Checks if VBlank triggred a TICK (1/150)
(2)  290/     190 :                     ; --------------------------------------------------------
(2)  291/     190 :                     
(2)  292/     190 :                     check_tick:
(2)  293/     190 : F3                  		di				; Disable ints
(2)  294/     191 : F5                  		push	af
(2)  295/     192 : E5                  		push	hl
(2)  296/     193 : 21 61 0D            		ld	hl,tickFlag+1		; read last TICK flag
(2)  297/     196 : 7E                  		ld	a,(hl)			; non-zero value?
(2)  298/     197 : B7                  		or 	a
(2)  299/     198 : 28 1D               		jr	z,.ctnotick
(2)  300/     19A :                     
(2)  301/     19A :                     	; ints are disabled from here
(2)  302/     19A : 36 00               		ld	(hl),0			; Reset TICK flag
(2)  303/     19C : 23                  		inc	hl			; Move to tickCnt
(2)  304/     19D : 34                  		inc	(hl)			; and increment
(2)  305/     19E : CD 23 04            		call	dac_me
(2)  306/     1A1 : D5                  		push	de
(2)  307/     1A2 : 2A 65 0D            		ld	hl,(sbeatAcc)		; Increment subbeats
(2)  308/     1A5 : ED 5B 63 0D         		ld	de,(sbeatPtck)
(2)  309/     1A9 : CD 23 04            		call	dac_me
(2)  310/     1AC : 19                  		add	hl,de
(2)  311/     1AD : 22 65 0D            		ld	(sbeatAcc),hl
(2)  312/     1B0 : D1                  		pop	de
(2)  313/     1B1 : CD 23 04            		call	dac_me
(2)  314/     1B4 : CD 37 04            		call	dac_fill
(2)  315/     1B7 :                     .ctnotick:
(2)  316/     1B7 : E1                  		pop	hl
(2)  317/     1B8 : F1                  		pop	af
(2)  318/     1B9 : FB                  		ei				; Enable ints again
(2)  319/     1BA : C9                  		ret
(2)  320/     1BB :                     
(2)  321/     1BB :                     ; --------------------------------------------------------
(2)  322/     1BB :                     ; set_tempo
(2)  323/     1BB :                     ; 
(2)  324/     1BB :                     ; Input:
(2)  325/     1BB :                     ; a - Beats per minute
(2)  326/     1BB :                     ;
(2)  327/     1BB :                     ; Uses:
(2)  328/     1BB :                     ; de,hl
(2)  329/     1BB :                     ; --------------------------------------------------------
(2)  330/     1BB :                     
(2)  331/     1BB :                     set_tempo:
(2)  332/     1BB : 11 DA 00            		ld	de,218
(2)  333/     1BE : CD CD 01            		call	do_multiply
(2)  334/     1C1 : AF                  		xor	a
(2)  335/     1C2 : CB 25               		sla	l
(2)  336/     1C4 : CB 14               		rl	h
(2)  337/     1C6 : 17                  		rla			; AH <- sbpt, 8 fracs
(2)  338/     1C7 : 6C                  		ld	l,h
(2)  339/     1C8 : 67                  		ld	h,a		; HL <- AH
(2)  340/     1C9 : 22 63 0D            		ld	(sbeatPtck),hl
(2)  341/     1CC : C9                  		ret
(2)  342/     1CD :                     
(2)  343/     1CD :                     ; ---------------------------------------------
(2)  344/     1CD :                     ; do_multiply
(2)  345/     1CD :                     ; 
(2)  346/     1CD :                     ; Input:
(2)  347/     1CD :                     ; hl - Start from
(2)  348/     1CD :                     ; de - Multply by this
(2)  349/     1CD :                     ; ---------------------------------------------
(2)  350/     1CD :                     
(2)  351/     1CD :                     ; 			      ; GETPATPTR
(2)  352/     1CD :                     ; 			      ; 		ld	HL,PATCHDATA
(2)  353/     1CD :                     ; 	dc.b	$21,$86,$18
(2)  354/     1CD :                     ; 			      ; 		ld	DE,39
(2)  355/     1CD :                     ; 	dc.b	$11,$27,$00
(2)  356/     1CD :                     ; 			      ; 		jr	MULADD
(2)  357/     1CD :                     ; 	dc.b	$18,$03
(2)  358/     1CD :                     
(2)  359/     1CD :                     do_multiply:
(2)  360/     1CD : 21 00 00            		ld	hl,0
(2)  361/     1D0 :                     .mul_add:
(2)  362/     1D0 : CB 3F               		srl	a
(2)  363/     1D2 : 30 01               		jr	nc,.mulbitclr
(2)  364/     1D4 : 19                  		add	hl,de
(2)  365/     1D5 :                     .mulbitclr:
(2)  366/     1D5 : C8                  		ret	z
(2)  367/     1D6 : CB 23               		sla	e		; if more bits still set in A, DE*=2 and loop
(2)  368/     1D8 : CB 12               		rl	d
(2)  369/     1DA : 18 F4               		jr	.mul_add
(2)  370/     1DC :                     
(2)  371/     1DC :                     ; --------------------------------------------------------
(2)  372/     1DC :                     ; transferRom
(2)  373/     1DC :                     ; 
(2)  374/     1DC :                     ; Transfer bytes from ROM to Z80
(2)  375/     1DC :                     ; 
(2)  376/     1DC :                     ; Input:
(2)  377/     1DC :                     ; a  - Source ROM address xx0000
(2)  378/     1DC :                     ; bc - Byte count (0000h NOT allowed)
(2)  379/     1DC :                     ; hl - Source ROM address 00xxxx
(2)  380/     1DC :                     ; de - Destination address
(2)  381/     1DC :                     ; 
(2)  382/     1DC :                     ; Uses:
(2)  383/     1DC :                     ; b, ix
(2)  384/     1DC :                     ; 
(2)  385/     1DC :                     ; Notes:
(2)  386/     1DC :                     ; call dac_fill first if transfering anything
(2)  387/     1DC :                     ; other than WAV sample data, just to be safe
(2)  388/     1DC :                     ; --------------------------------------------------------
(2)  389/     1DC :                     
(2)  390/     1DC :                     transferRom:
(2)  391/     1DC : CD 23 04            		call	dac_me
(2)  392/     1DF : DD E5               		push	ix
(2)  393/     1E1 : DD 21 73 0D         		ld	ix,commZRomBlk
(2)  394/     1E5 : 22 6F 0D            		ld	(x68ksrclsb),hl
(2)  395/     1E8 : CB BC               		res	7,h
(2)  396/     1EA : 06 00               		ld	b,0
(2)  397/     1EC : 0D                  		dec	c
(2)  398/     1ED : 09                  		add	hl,bc
(2)  399/     1EE : CB 7C               		bit	7,h
(2)  400/     1F0 : 20 0B               		jr	nz,.half_way
(2)  401/     1F2 :                     	; single transfer
(2)  402/     1F2 : 2A 6F 0D            		ld	hl,(x68ksrclsb)
(2)  403/     1F5 : 0C                  		inc	c
(2)  404/     1F6 : 47                  		ld	b,a
(2)  405/     1F7 : CD 20 02            		call	.transfer
(2)  406/     1FA : DD E1               		pop	ix
(2)  407/     1FC : C9                  		ret
(2)  408/     1FD :                     
(2)  409/     1FD :                     	; double transfer
(2)  410/     1FD :                     .half_way:
(2)  411/     1FD : 47                  		ld	b,a
(2)  412/     1FE : C5                  		push	bc
(2)  413/     1FF : E5                  		push	hl
(2)  414/     200 : 79                  		ld	a,c
(2)  415/     201 : 95                  		sub	a,l
(2)  416/     202 : 4F                  		ld	c,a
(2)  417/     203 : 2A 6F 0D            		ld	hl,(x68ksrclsb)
(2)  418/     206 : CD 20 02            		call	.transfer
(2)  419/     209 : E1                  		pop	hl
(2)  420/     20A : C1                  		pop	bc
(2)  421/     20B : 4D                  		ld	c,l
(2)  422/     20C : 0C                  		inc	c
(2)  423/     20D : 3A 70 0D            		ld	a,(x68ksrcmid)
(2)  424/     210 : E6 80               		and	80h
(2)  425/     212 : C6 80               		add	a,80h
(2)  426/     214 : 67                  		ld	h,a
(2)  427/     215 : 2E 00               		ld	l,0
(2)  428/     217 : 30 01               		jr	nc,.x68knocarry
(2)  429/     219 : 04                  		inc	b
(2)  430/     21A :                     .x68knocarry:
(2)  431/     21A : CD 20 02            		call	.transfer
(2)  432/     21D : DD E1               		pop	ix
(2)  433/     21F : C9                  		ret
(2)  434/     220 :                     
(2)  435/     220 :                     ; b  - Source ROM xx0000
(2)  436/     220 :                     ;  c - Bytes to transfer (00h not allowed)
(2)  437/     220 :                     ; hl - Source ROM 00xxxx
(2)  438/     220 :                     ; de - Destination address
(2)  439/     220 :                     ; 
(2)  440/     220 :                     ; Uses:
(2)  441/     220 :                     ; a
(2)  442/     220 :                     .transfer:
(2)  443/     220 : CD 23 04            		call	dac_me
(2)  444/     223 : D5                  		push	de
(2)  445/     224 : 11 00 60            		ld	de,6000h
(2)  446/     227 : 7C                  		ld	a,h
(2)  447/     228 : CB 07               		rlc	a
(2)  448/     22A : 12                  		ld	(de),a
(2)  449/     22B : 78                  		ld	a,b
(2)  450/     22C : 12                  		ld	(de),a
(2)  451/     22D : 1F                  		rra
(2)  452/     22E : 12                  		ld	(de),a
(2)  453/     22F : 1F                  		rra
(2)  454/     230 : 12                  		ld	(de),a
(2)  455/     231 : 1F                  		rra
(2)  456/     232 : CD 23 04            		call	dac_me
(2)  457/     235 : 12                  		ld	(de),a
(2)  458/     236 : 1F                  		rra
(2)  459/     237 : 12                  		ld	(de),a
(2)  460/     238 : 1F                  		rra
(2)  461/     239 : 12                  		ld	(de),a
(2)  462/     23A : 1F                  		rra
(2)  463/     23B : 12                  		ld	(de),a
(2)  464/     23C : 1F                  		rra
(2)  465/     23D : 12                  		ld	(de),a
(2)  466/     23E : D1                  		pop	de
(2)  467/     23F : CB FC               		set	7,h
(2)  468/     241 : CD 23 04            		call	dac_me
(2)  469/     244 :                     		
(2)  470/     244 :                     	; Transfer data in parts of 3bytes
(2)  471/     244 :                     	; while playing DAC in the process
(2)  472/     244 : 79                  		ld	a,c
(2)  473/     245 : 06 00               		ld	b,0
(2)  474/     247 : DD CB 01 C6         		set	0,(ix+1)		; Tell to 68k that we are reading from ROM
(2)  475/     24B : D6 03               		sub	a,3
(2)  476/     24D : 38 14               		jr	c,.x68klast
(2)  477/     24F :                     .x68kloop:
(2)  478/     24F : 0E 02               		ld	c,3-1
(2)  479/     251 : DD CB 00 46         		bit	0,(ix)			; If 68k requested ROM block from here
(2)  480/     255 : 20 20               		jr	nz,.x68klpwt
(2)  481/     257 :                     .x68klpcont:
(2)  482/     257 : ED B0               		ldir
(2)  483/     259 : 00                  		nop
(2)  484/     25A : CD 23 04            		call	dac_me
(2)  485/     25D : 00                  		nop
(2)  486/     25E : D6 02               		sub	a,3-1
(2)  487/     260 : D2 4F 02            		jp	nc,.x68kloop
(2)  488/     263 :                     .x68klast:
(2)  489/     263 : C6 03               		add	a,3
(2)  490/     265 : 4F                  		ld	c,a
(2)  491/     266 : DD CB 00 46         		bit	0,(ix)			; If 68k requested ROM block from here
(2)  492/     26A : C2 8C 02            		jp	nz,.x68klstwt
(2)  493/     26D :                     .x68klstcont:
(2)  494/     26D : ED B0               		ldir
(2)  495/     26F : CD 23 04            		call	dac_me
(2)  496/     272 :                     ; 		call	dac_fill
(2)  497/     272 :                     ; 		call	dac_me
(2)  498/     272 : DD CB 01 86         		res	0,(ix+1)
(2)  499/     276 : C9                  		ret
(2)  500/     277 :                     
(2)  501/     277 :                     ; If 68k block ROM access:
(2)  502/     277 :                     ; TODO: This MIGHT cause the DAC to run out of data
(2)  503/     277 :                     
(2)  504/     277 :                     ; Mid-reading
(2)  505/     277 :                     .x68klpwt:
(2)  506/     277 : DD CB 01 86         		res	0,(ix+1)		; Not touching ROM
(2)  507/     27B :                     .x68kpwtlp:
(2)  508/     27B : 00                  		nop
(2)  509/     27C : CD 23 04            		call	dac_me
(2)  510/     27F : 00                  		nop
(2)  511/     280 : DD CB 00 46         		bit	0,(ix)			; Is ROM free?
(2)  512/     284 : 20 F5               		jr	nz,.x68kpwtlp
(2)  513/     286 : DD CB 01 C6         		set	0,(ix+1)		; Touching ROM again.
(2)  514/     28A : 18 CB               		jr	.x68klpcont
(2)  515/     28C :                     ; Last write
(2)  516/     28C :                     .x68klstwt:
(2)  517/     28C : DD CB 01 86         		res	0,(ix+1)		; Not touching ROM
(2)  518/     290 :                     .x68klstwtlp:
(2)  519/     290 : 00                  		nop
(2)  520/     291 : CD 23 04            		call	dac_me
(2)  521/     294 : 00                  		nop
(2)  522/     295 : DD CB 00 46         		bit	0,(ix)			; Is ROM free?
(2)  523/     299 : 20 F5               		jr	nz,.x68klstwtlp
(2)  524/     29B : DD CB 01 C6         		set	0,(ix+1)		; Touching ROM again.
(2)  525/     29F : 18 CC               		jr	.x68klstcont
(2)  526/     2A1 :                     
(2)  527/     2A1 :                     ; ====================================================================
(2)  528/     2A1 :                     ; ----------------------------------------------------------------
(2)  529/     2A1 :                     ; Sound chip interaction routines
(2)  530/     2A1 :                     ; ----------------------------------------------------------------
(2)  531/     2A1 :                     
(2)  532/     2A1 :                     ; ---------------------------------------------
(2)  533/     2A1 :                     ; FM send registers
(2)  534/     2A1 :                     ; 
(2)  535/     2A1 :                     ; Input:
(2)  536/     2A1 :                     ; d - ctrl
(2)  537/     2A1 :                     ; e - data
(2)  538/     2A1 :                     ; c - channel
(2)  539/     2A1 :                     ; ---------------------------------------------
(2)  540/     2A1 :                     
(2)  541/     2A1 :                     SndDrv_FmSet_1:
(2)  542/     2A1 : 7A                  		ld	a,d
(2)  543/     2A2 : 32 00 40            		ld	(Zym_ctrl_1),a
(2)  544/     2A5 : 00                  		nop
(2)  545/     2A6 : 7B                  		ld	a,e
(2)  546/     2A7 : 32 01 40            		ld	(Zym_data_1),a
(2)  547/     2AA : 00                  		nop
(2)  548/     2AB : C9                  		ret
(2)  549/     2AC :                     
(2)  550/     2AC :                     SndDrv_FmSet_2:
(2)  551/     2AC : 7A                  		ld	a,d
(2)  552/     2AD : 32 02 40            		ld	(Zym_ctrl_2),a
(2)  553/     2B0 : 00                  		nop
(2)  554/     2B1 : 7B                  		ld	a,e
(2)  555/     2B2 : 32 03 40            		ld	(Zym_data_2),a
(2)  556/     2B5 : 00                  		nop	
(2)  557/     2B6 : C9                  		ret
(2)  558/     2B7 :                     
(2)  559/     2B7 :                     ; --------------------------------------------------------
(2)  560/     2B7 :                     ; psg_env
(2)  561/     2B7 :                     ; 
(2)  562/     2B7 :                     ; Processes the PSG to add effects
(2)  563/     2B7 :                     ; --------------------------------------------------------
(2)  564/     2B7 :                     
(2)  565/     2B7 :                     psg_env:
(2)  566/     2B7 : FD 21 75 0D         		ld	iy,psgcom
(2)  567/     2BB : DD 21 DA 0D         		ld	ix,PSGVTBLTG3		; Byte for Unlocking PSG3
(2)  568/     2BF : 21 11 7F            		ld	hl,Zpsg_ctrl
(2)  569/     2C2 : 16 80               		ld	d,80h			; PSG first ctrl command
(2)  570/     2C4 : 1E 04               		ld	e,4			; 4 channels
(2)  571/     2C6 :                     .vloop:
(2)  572/     2C6 : CD 23 04            		call	dac_me
(2)  573/     2C9 : FD 4E 00            		ld	c,(iy+COM)		; c - current command
(2)  574/     2CC : FD 36 00 00         		ld	(iy+COM),0		; clear for the next one
(2)  575/     2D0 :                     
(2)  576/     2D0 :                     	; bit 2 - stop sound
(2)  577/     2D0 : CB 51               		bit	2,c			; bit 2?
(2)  578/     2D2 : 28 15               		jr	z,.ckof
(2)  579/     2D4 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(2)  580/     2D8 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(2)  581/     2DC : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(2)  582/     2E0 : 3E 01               		ld	a,1			; PSG Channel 3?
(2)  583/     2E2 : BB                  		cp	e
(2)  584/     2E3 : 20 04               		jr	nz,.ckof
(2)  585/     2E5 : DD CB 00 AE         		res	5,(ix)			; Unlock PSG3
(2)  586/     2E9 :                     .ckof:
(2)  587/     2E9 :                     	; bit 1 - key off
(2)  588/     2E9 : CB 49               		bit	1,c			; bit 1?
(2)  589/     2EB : 28 0F               		jr      z,.ckon
(2)  590/     2ED : FD 7E 18            		ld	a,(iy+MODE)		; envelope mode 0?
(2)  591/     2F0 : FE 00               		cp	0
(2)  592/     2F2 : 28 08               		jr	z,.ckon
(2)  593/     2F4 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2)  594/     2F8 : FD 36 18 04         		ld	(iy+MODE),4		; set envelope mode 4
(2)  595/     2FC :                     .ckon:
(2)  596/     2FC :                     	; bit 0 - key on
(2)  597/     2FC : CB 41               		bit	0,c			; bit 0?
(2)  598/     2FE : 28 1A               		jr	z,.envproc
(2)  599/     300 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(2)  600/     304 : FD 7E 1C            		ld	a,(iy+DTL)		; load frequency LSB or NOISE data
(2)  601/     307 : B2                  		or	d			; OR with current channel
(2)  602/     308 : 77                  		ld	(hl),a			; write it
(2)  603/     309 : 3E 01               		ld	a,1			; NOISE channel?
(2)  604/     30B : BB                  		cp	e
(2)  605/     30C : 28 04               		jr	z,.nskip		; then don't write next one
(2)  606/     30E : FD 7E 20            		ld	a,(iy+DTH)		; Write PSG MSB frequency (1-3 only)
(2)  607/     311 : 77                  		ld	(hl),a
(2)  608/     312 :                     .nskip:
(2)  609/     312 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2)  610/     316 : FD 36 18 01         		ld	(iy+MODE),1		; set to attack mode
(2)  611/     31A :                     	
(2)  612/     31A :                     	; ----------------------------
(2)  613/     31A :                     	; Start processing
(2)  614/     31A :                     	; current PSG channel
(2)  615/     31A :                     	; ----------------------------
(2)  616/     31A :                     .envproc:
(2)  617/     31A : CD 23 04            		call	dac_me
(2)  618/     31D : FD 7E 18            		ld	a,(iy+MODE)
(2)  619/     320 : B7                  		or	a			; no modes
(2)  620/     321 : CA A8 03            		jp	z,.vedlp
(2)  621/     324 :                     		
(2)  622/     324 :                     	; Attack mode
(2)  623/     324 : FE 01               		cp 	001b
(2)  624/     326 : 20 26               		jr	nz,.chk2
(2)  625/     328 :                     .mode1:
(2)  626/     328 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2)  627/     32C : FD 7E 04            		ld	a,(iy+LEV)		; a - current level (volume)
(2)  628/     32F : FD 46 24            		ld	b,(iy+ALV)		; b - attack level
(2)  629/     332 : FD 96 08            		sub	a,(iy+ATK)		; (attack rate) - (level)
(2)  630/     335 : 38 0D               		jr	c,.atkend		; attack finished
(2)  631/     337 : 28 0B               		jr	z,.atkend
(2)  632/     339 : B8                  		cp	b			; check level
(2)  633/     33A : 38 08               		jr	c,.atkend		; attack finished
(2)  634/     33C : 28 06               		jr	z,.atkend		
(2)  635/     33E : FD 77 04            		ld	(iy+LEV),a		; set new level
(2)  636/     341 : C3 A8 03            		jp	.vedlp
(2)  637/     344 :                     .atkend:
(2)  638/     344 : FD 70 04            		ld	(iy+LEV),b		; attack level = new level
(2)  639/     347 : FD 36 18 02         		ld	(iy+MODE),2		; set to decay mode
(2)  640/     34B : C3 A8 03            		jp	.vedlp
(2)  641/     34E :                     .chk2:
(2)  642/     34E :                     
(2)  643/     34E :                     	; Decay mode
(2)  644/     34E : FE 02               		cp	010b
(2)  645/     350 : C2 82 03            		jp	nz,.chk4
(2)  646/     353 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2)  647/     357 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(2)  648/     35A : FD 46 10            		ld	b,(iy+SLV)		; b - Sustain
(2)  649/     35D : B8                  		cp	b
(2)  650/     35E : 38 0C               		jr	c,.dkadd		; if carry: add
(2)  651/     360 : 28 17               		jr	z,.dkyend		; if zero:  finish
(2)  652/     362 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(2)  653/     365 : 38 12               		jr	c,.dkyend		; finish if wraped.
(2)  654/     367 : B8                  		cp	b			; compare level
(2)  655/     368 : 38 0F               		jr	c,.dkyend		; and finish
(2)  656/     36A : 18 08               		jr	.dksav
(2)  657/     36C :                     .dkadd:
(2)  658/     36C : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(2)  659/     36F : 38 08               		jr	c,.dkyend		; finish if wraped.
(2)  660/     371 : B8                  		cp	b			; compare level
(2)  661/     372 : 30 05               		jr	nc,.dkyend
(2)  662/     374 :                     .dksav:
(2)  663/     374 : FD 77 04            		ld	(iy+LEV),a		; save new level
(2)  664/     377 : 18 2F               		jr	.vedlp
(2)  665/     379 :                     .dkyend:
(2)  666/     379 : FD 70 04            		ld	(iy+LEV),b		; save sustain value
(2)  667/     37C : FD 36 18 03         		ld	(iy+MODE),3		; and set mode too.
(2)  668/     380 : 18 26               		jr	.vedlp
(2)  669/     382 :                     
(2)  670/     382 :                     	; Sustain phase
(2)  671/     382 :                     .chk4:
(2)  672/     382 : FE 04               		cp	100b
(2)  673/     384 : 20 22               		jr	nz,.vedlp
(2)  674/     386 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2)  675/     38A : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(2)  676/     38D : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(2)  677/     390 : 38 05               		jr	c,.killenv		; release done
(2)  678/     392 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(2)  679/     395 : 18 11               		jr	.vedlp
(2)  680/     397 :                     .killenv:
(2)  681/     397 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(2)  682/     39B : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(2)  683/     39F : 3E 01               		ld	a,1			; PSG Channel 3?
(2)  684/     3A1 : BB                  		cp	e
(2)  685/     3A2 : 20 04               		jr	nz,.vedlp
(2)  686/     3A4 : DD CB 00 AE         		res	5,(ix)			; Unlock PSG3
(2)  687/     3A8 :                     .vedlp:
(2)  688/     3A8 : FD 23               		inc	iy			; next COM to check
(2)  689/     3AA : 3E 20               		ld	a,20h			; next PSG channel
(2)  690/     3AC : 82                  		add	a,d
(2)  691/     3AD : 57                  		ld	d,a
(2)  692/     3AE : 1D                  		dec	e
(2)  693/     3AF : C2 C6 02            		jp	nz,.vloop
(2)  694/     3B2 :                     
(2)  695/     3B2 :                     	; ----------------------------
(2)  696/     3B2 :                     	; Set volumes
(2)  697/     3B2 : CD 23 04            		call	dac_me
(2)  698/     3B5 : FD 21 75 0D         		ld	iy,psgcom
(2)  699/     3B9 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(2)  700/     3BD : 21 90 00            		ld	hl,90h		; Channel + volumeset bit
(2)  701/     3C0 : 11 20 00            		ld	de,20h		; next channel increment
(2)  702/     3C3 : 06 04               		ld	b,4
(2)  703/     3C5 :                     .nextpsg:
(2)  704/     3C5 : FD CB 28 46         		bit	0,(iy+FLG)	; PSG update?
(2)  705/     3C9 : 28 13               		jr	z,.flgoff
(2)  706/     3CB : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(2)  707/     3CF : FD 7E 04            		ld	a,(iy+LEV)	; a - Level
(2)  708/     3D2 : CB 3F               		srl	a		; (Level >> 4)
(2)  709/     3D4 : CB 3F               		srl	a
(2)  710/     3D6 : CB 3F               		srl	a
(2)  711/     3D8 : CB 3F               		srl	a
(2)  712/     3DA : B5                  		or	l		; merge Channel bits
(2)  713/     3DB : DD 77 00            		ld	(ix),a		; Write volume
(2)  714/     3DE :                     .flgoff:
(2)  715/     3DE : 19                  		add	hl,de		; next channel
(2)  716/     3DF : FD 23               		inc	iy		; next com
(2)  717/     3E1 : 10 E2               		djnz	.nextpsg
(2)  718/     3E3 : CD 23 04            		call	dac_me
(2)  719/     3E6 : C9                  		ret
(2)  720/     3E7 :                     
(2)  721/     3E7 :                     ; --------------------------------------------------------
(2)  722/     3E7 :                     ; dac_play
(2)  723/     3E7 :                     ; 
(2)  724/     3E7 :                     ; Plays a new sample
(2)  725/     3E7 :                     ; --------------------------------------------------------
(2)  726/     3E7 :                     
(2)  727/     3E7 :                     dac_play:
(2)  728/     3E7 : D9                  		exx
(2)  729/     3E8 : 01 0C 00            		ld	bc,dWaveBuff>>8			; bc - WAVFIFO MSB
(2)  730/     3EB : ED 5B F3 0D         		ld	de,(wave_Pitch)			; de - Pitch
(2)  731/     3EF : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8			; hl - WAVFIFO LSB pointer (xx.00)
(2)  732/     3F2 : D9                  		exx
(2)  733/     3F3 : 2A EA 0D            		ld	hl,(wave_Start)
(2)  734/     3F6 : 3A EC 0D            		ld 	a,(wave_Start+2)
(2)  735/     3F9 : 22 68 0D            		ld	(dDacPntr),hl
(2)  736/     3FC : 32 6A 0D            		ld	(dDacPntr+2),a
(2)  737/     3FF : 2A ED 0D            		ld	hl,(wave_End)
(2)  738/     402 : 3A EF 0D            		ld 	a,(wave_End+2)
(2)  739/     405 : 22 6B 0D            		ld	(dDacCntr),hl
(2)  740/     408 : 32 6D 0D            		ld	(dDacCntr+2),a
(2)  741/     40B : CD 45 04            		call	dac_firstfill
(2)  742/     40E : (MACRO)             		dacStream True
(2)  742/     40E : 3E 2B                               ld      a,2Bh
(2)  742/     410 : 32 00 40                            ld      (Zym_ctrl_1),a
(2)  742/     413 : 3E 80                               ld      a,80h
(2)  742/     415 : 32 01 40                            ld      (Zym_data_1),a
(2)  742/     418 : 3E D9                               ld      a,zopcExx
(2)  742/     41A : 32 23 04                            ld      (dac_me),a
(2)  742/     41D : 3E F5                               ld      a,zopcPushAf
(2)  742/     41F : 32 37 04                            ld      (dac_fill),a
(2)  743/     422 : C9                  		ret
(2)  744/     423 :                     
(2)  745/     423 :                     ; --------------------------------------------------------
(2)  746/     423 :                     ; dac_me
(2)  747/     423 :                     ; 
(2)  748/     423 :                     ; Writes wave data to DAC using data stored on FIFO.
(2)  749/     423 :                     ; Call this routine every 6 or more lines of code
(2)  750/     423 :                     ; (use any emu-debugger to check if it still plays
(2)  751/     423 :                     ; at stable 16000hz)
(2)  752/     423 :                     ;
(2)  753/     423 :                     ; Input (EXX):
(2)  754/     423 :                     ;  c - WAVEFIFO MSB
(2)  755/     423 :                     ; de - Pitch (xx.00)
(2)  756/     423 :                     ; h  - WAVEFIFO LSB (as xx.00)
(2)  757/     423 :                     ; 
(2)  758/     423 :                     ; Uses (EXX):
(2)  759/     423 :                     ; b
(2)  760/     423 :                     ; 
(2)  761/     423 :                     ; *** self-modifiable code ***
(2)  762/     423 :                     ; --------------------------------------------------------
(2)  763/     423 :                     
(2)  764/     423 : D9                  dac_me:		exx				; <-- self-changes between EXX(play) and RET(stop)
(2)  765/     424 : 08                  		ex	af,af'
(2)  766/     425 : 45                  		ld	b,l
(2)  767/     426 : 3E 2A               		ld	a,2Ah
(2)  768/     428 : 32 00 40            		ld	(Zym_ctrl_1),a
(2)  769/     42B : 6C                  		ld	l,h
(2)  770/     42C : 61                  		ld	h,c
(2)  771/     42D : 7E                  		ld	a,(hl)
(2)  772/     42E : 32 01 40            		ld	(Zym_data_1),a
(2)  773/     431 : 65                  		ld	h,l
(2)  774/     432 : 68                  		ld	l,b
(2)  775/     433 : 19                  		add	hl,de
(2)  776/     434 : 08                  		ex	af,af'
(2)  777/     435 : D9                  		exx
(2)  778/     436 : C9                  		ret
(2)  779/     437 :                     
(2)  780/     437 :                     ; --------------------------------------------------------
(2)  781/     437 :                     ; dac_fill
(2)  782/     437 :                     ; 
(2)  783/     437 :                     ; Refills a half of the WAVE FIFO data, automatic
(2)  784/     437 :                     ; 
(2)  785/     437 :                     ; *** self-modifiable code ***
(2)  786/     437 :                     ; --------------------------------------------------------
(2)  787/     437 :                     
(2)  788/     437 : F5                  dac_fill:	push	af			; <-- self-changes between PUSH AF(play) and RET(stop)
(2)  789/     438 : 3A 6E 0D            		ld	a,(dDacFifoMid)
(2)  790/     43B : D9                  		exx
(2)  791/     43C : AC                  		xor	h			; xx.00
(2)  792/     43D : D9                  		exx
(2)  793/     43E : E6 80               		and	80h
(2)  794/     440 : C2 49 04            		jp	nz,dac_refill
(2)  795/     443 : F1                  		pop	af
(2)  796/     444 : C9                  		ret
(2)  797/     445 :                     ; first time
(2)  798/     445 :                     dac_firstfill:
(2)  799/     445 : CD 90 01            		call	check_tick
(2)  800/     448 : F5                  		push	af
(2)  801/     449 :                     
(2)  802/     449 :                     ; If auto-fill is needed
(2)  803/     449 :                     ; TODO: improve this.
(2)  804/     449 :                     dac_refill:
(2)  805/     449 : CD 23 04            		call	dac_me
(2)  806/     44C : C5                  		push	bc
(2)  807/     44D : D5                  		push	de
(2)  808/     44E : E5                  		push	hl
(2)  809/     44F : 3A F5 0D            		ld	a,(wav_Flags)
(2)  810/     452 : FE 07               		cp	111b
(2)  811/     454 : D2 0A 05            		jp	nc,.FDF7
(2)  812/     457 :                     
(2)  813/     457 : 3A 6D 0D            		ld	a,(dDacCntr+2)
(2)  814/     45A : 2A 6B 0D            		ld	hl,(dDacCntr)
(2)  815/     45D : 01 80 00            		ld	bc,80h
(2)  816/     460 : 37                  		scf
(2)  817/     461 : 3F                  		ccf
(2)  818/     462 : ED 42               		sbc	hl,bc
(2)  819/     464 : DE 00               		sbc	a,0
(2)  820/     466 : 32 6D 0D            		ld	(dDacCntr+2),a
(2)  821/     469 : 22 6B 0D            		ld	(dDacCntr),hl
(2)  822/     46C : 16 0C               		ld	d,dWaveBuff>>8
(2)  823/     46E : B7                  		or	a
(2)  824/     46F : FA 99 04            		jp	m,.FDF4DONE
(2)  825/     472 :                     ; 		jr	c,.FDF4DONE
(2)  826/     472 :                     ; 		jr	z,.FDF4DONE
(2)  827/     472 :                     .keepcntr:
(2)  828/     472 :                     
(2)  829/     472 : 3A 6E 0D            		ld	a,(dDacFifoMid)
(2)  830/     475 : 5F                  		ld	e,a
(2)  831/     476 : C6 80               		add 	a,80h
(2)  832/     478 : 32 6E 0D            		ld	(dDacFifoMid),a
(2)  833/     47B : 2A 68 0D            		ld	hl,(dDacPntr)
(2)  834/     47E : 3A 6A 0D            		ld	a,(dDacPntr+2)
(2)  835/     481 : CD DC 01            		call	transferRom
(2)  836/     484 : 2A 68 0D            		ld	hl,(dDacPntr)
(2)  837/     487 : 3A 6A 0D            		ld	a,(dDacPntr+2)
(2)  838/     48A : 01 80 00            		ld	bc,80h
(2)  839/     48D : 09                  		add	hl,bc
(2)  840/     48E : CE 00               		adc	a,0
(2)  841/     490 : 22 68 0D            		ld	(dDacPntr),hl
(2)  842/     493 : 32 6A 0D            		ld	(dDacPntr+2),a
(2)  843/     496 : C3 1E 05            		jp	.FDFreturn
(2)  844/     499 :                     .FDF4DONE:
(2)  845/     499 : 16 0C               		ld	d,dWaveBuff>>8
(2)  846/     49B : 3A F5 0D            		ld	a,(wav_Flags)
(2)  847/     49E : FE 05               		cp	101b
(2)  848/     4A0 : CA C3 04            		jp	z,.FDF72
(2)  849/     4A3 :                     		
(2)  850/     4A3 : 7D                  		ld	a,l
(2)  851/     4A4 : C6 80               		add	a,80h
(2)  852/     4A6 : 4F                  		ld	c,a
(2)  853/     4A7 : 06 00               		ld	b,0
(2)  854/     4A9 : C5                  		push	bc
(2)  855/     4AA : 3A 6E 0D            		ld	a,(dDacFifoMid)
(2)  856/     4AD : 5F                  		ld	e,a
(2)  857/     4AE : C6 80               		add	a,80h
(2)  858/     4B0 : 32 6E 0D            		ld	(dDacFifoMid),a
(2)  859/     4B3 : C1                  		pop	bc			; C <- # just xfered
(2)  860/     4B4 : 79                  		ld	a,c
(2)  861/     4B5 : B0                  		or	b
(2)  862/     4B6 : 28 52               		jr	z,.FDF7
(2)  863/     4B8 : 2A 68 0D            		ld	hl,(dDacPntr)
(2)  864/     4BB : 3A 6A 0D            		ld	a,(dDacPntr+2)
(2)  865/     4BE : CD DC 01            		call	transferRom
(2)  866/     4C1 : 18 47               		jr	.FDF7
(2)  867/     4C3 :                     .FDF72:
(2)  868/     4C3 :                     
(2)  869/     4C3 :                     	; loop sample
(2)  870/     4C3 : C5                  		push	bc
(2)  871/     4C4 : D5                  		push	de
(2)  872/     4C5 : 3A F2 0D            		ld	a,(wave_Loop+2)
(2)  873/     4C8 : 4F                  		ld	c,a
(2)  874/     4C9 : ED 5B F0 0D         		ld	de,(wave_Loop)
(2)  875/     4CD : 2A EA 0D            		ld	hl,(wave_Start)
(2)  876/     4D0 : 3A EC 0D            		ld 	a,(wave_Start+2)
(2)  877/     4D3 : 81                  		add	a,c
(2)  878/     4D4 : 19                  		add	hl,de
(2)  879/     4D5 : CE 00               		adc	a,0
(2)  880/     4D7 : 22 68 0D            		ld	(dDacPntr),hl
(2)  881/     4DA : 32 6A 0D            		ld	(dDacPntr+2),a
(2)  882/     4DD : 2A ED 0D            		ld	hl,(wave_End)
(2)  883/     4E0 : 3A EF 0D            		ld 	a,(wave_End+2)
(2)  884/     4E3 : 91                  		sub	a,c
(2)  885/     4E4 : 37                  		scf
(2)  886/     4E5 : 3F                  		ccf
(2)  887/     4E6 : ED 52               		sbc	hl,de
(2)  888/     4E8 : DE 00               		sbc	a,0
(2)  889/     4EA : 22 6B 0D            		ld	(dDacCntr),hl
(2)  890/     4ED : 32 6D 0D            		ld	(dDacCntr+2),a
(2)  891/     4F0 : D1                  		pop	de
(2)  892/     4F1 : C1                  		pop	bc
(2)  893/     4F2 : 78                  		ld	a,b
(2)  894/     4F3 : B1                  		or	c
(2)  895/     4F4 : 28 28               		jr	z,.FDFreturn
(2)  896/     4F6 : 3A 6E 0D            		ld	a,(dDacFifoMid)
(2)  897/     4F9 : 5F                  		ld	e,a
(2)  898/     4FA : C6 80               		add	a,80h
(2)  899/     4FC : 32 6E 0D            		ld	(dDacFifoMid),a
(2)  900/     4FF : 2A 68 0D            		ld	hl,(dDacPntr)
(2)  901/     502 : 3A 6A 0D            		ld	a,(dDacPntr+2)
(2)  902/     505 : CD DC 01            		call	transferRom
(2)  903/     508 : 18 14               		jr	.FDFreturn
(2)  904/     50A :                     .FDF7:
(2)  905/     50A : (MACRO)             		dacStream False
(2)  905/     50A : 3E 2B                               ld      a,2Bh
(2)  905/     50C : 32 00 40                            ld      (Zym_ctrl_1),a
(2)  905/     50F : 3E 00                               ld      a,00h
(2)  905/     511 : 32 01 40                            ld      (Zym_data_1),a
(2)  905/     514 : 3E C9                               ld      a,zopcRet
(2)  905/     516 : 32 23 04                            ld      (dac_me),a
(2)  905/     519 : 3E C9                               ld      a,zopcRet
(2)  905/     51B : 32 37 04                            ld      (dac_fill),a
(2)  906/     51E :                     .FDFreturn:
(2)  907/     51E : E1                  		pop	hl
(2)  908/     51F : D1                  		pop	de
(2)  909/     520 : C1                  		pop	bc
(2)  910/     521 : F1                  		pop	af
(2)  911/     522 : C9                  		ret
(2)  912/     523 :                     			      
(2)  913/     523 :                     ; ====================================================================
(2)  914/     523 :                     ; ----------------------------------------------------------------
(2)  915/     523 :                     ; Tables
(2)  916/     523 :                     ; ----------------------------------------------------------------
(2)  917/     523 :                     
(2)  918/     523 : 00 01               wavFreq_List:	dw 100h		; C-0
(2)  919/     525 : 00 01               		dw 100h
(2)  920/     527 : 00 01               		dw 100h
(2)  921/     529 : 00 01               		dw 100h
(2)  922/     52B : 00 01               		dw 100h
(2)  923/     52D : 00 01               		dw 100h
(2)  924/     52F : 00 01               		dw 100h	
(2)  925/     531 : 00 01               		dw 100h
(2)  926/     533 : 00 01               		dw 100h
(2)  927/     535 : 00 01               		dw 100h
(2)  928/     537 : 00 01               		dw 100h
(2)  929/     539 : 00 01               		dw 100h
(2)  930/     53B : 00 01               		dw 100h		; C-1
(2)  931/     53D : 00 01               		dw 100h
(2)  932/     53F : 00 01               		dw 100h
(2)  933/     541 : 00 01               		dw 100h
(2)  934/     543 : 00 01               		dw 100h
(2)  935/     545 : 00 01               		dw 100h
(2)  936/     547 : 00 01               		dw 100h	
(2)  937/     549 : 00 01               		dw 100h
(2)  938/     54B : 00 01               		dw 100h
(2)  939/     54D : 00 01               		dw 100h
(2)  940/     54F : 00 01               		dw 100h
(2)  941/     551 : 00 01               		dw 100h
(2)  942/     553 : 00 01               		dw 100h		; C-2
(2)  943/     555 : 00 01               		dw 100h
(2)  944/     557 : 00 01               		dw 100h
(2)  945/     559 : 00 01               		dw 100h
(2)  946/     55B : 00 01               		dw 100h
(2)  947/     55D : 00 01               		dw 100h
(2)  948/     55F : 00 01               		dw 100h
(2)  949/     561 : 00 01               		dw 100h
(2)  950/     563 : 00 01               		dw 100h
(2)  951/     565 : 00 01               		dw 100h
(2)  952/     567 : 00 01               		dw 100h
(2)  953/     569 : 3B 00               		dw 03Bh
(2)  954/     56B : 3E 00               		dw 03Eh		; C-3 5512
(2)  955/     56D : 43 00               		dw 043h		; C#3
(2)  956/     56F : 46 00               		dw 046h		; D-3
(2)  957/     571 : 49 00               		dw 049h		; D#3
(2)  958/     573 : 4E 00               		dw 04Eh		; E-3
(2)  959/     575 : 54 00               		dw 054h		; F-3
(2)  960/     577 : 58 00               		dw 058h		; F#3
(2)  961/     579 : 5E 00               		dw 05Eh		; G-3 8363 -17
(2)  962/     57B : 63 00               		dw 063h		; G#3
(2)  963/     57D : 68 00               		dw 068h		; A-3
(2)  964/     57F : 70 00               		dw 070h		; A#3
(2)  965/     581 : 75 00               		dw 075h		; B-3
(2)  966/     583 : 7F 00               		dw 07Fh		; C-4 11025 -12
(2)  967/     585 : 88 00               		dw 088h		; C#4
(2)  968/     587 : 8F 00               		dw 08Fh		; D-4
(2)  969/     589 : 97 00               		dw 097h		; D#4
(2)  970/     58B : A0 00               		dw 0A0h		; E-4
(2)  971/     58D : AD 00               		dw 0ADh		; F-4
(2)  972/     58F : B5 00               		dw 0B5h		; F#4
(2)  973/     591 : C0 00               		dw 0C0h		; G-4
(2)  974/     593 : CC 00               		dw 0CCh		; G#4
(2)  975/     595 : D7 00               		dw 0D7h		; A-4
(2)  976/     597 : E7 00               		dw 0E7h		; A#4
(2)  977/     599 : F0 00               		dw 0F0h		; B-4
(2)  978/     59B : 00 01               		dw 100h		; C-5 22050
(2)  979/     59D : 10 01               		dw 110h		; C#5
(2)  980/     59F : 20 01               		dw 120h		; D-5
(2)  981/     5A1 : 2C 01               		dw 12Ch		; D#5
(2)  982/     5A3 : 42 01               		dw 142h		; E-5
(2)  983/     5A5 : 58 01               		dw 158h		; F-5
(2)  984/     5A7 : 6A 01               		dw 16Ah		; F#5 32000 +6
(2)  985/     5A9 : 7E 01               		dw 17Eh		; G-5
(2)  986/     5AB : 90 01               		dw 190h		; G#5
(2)  987/     5AD : AC 01               		dw 1ACh		; A-5
(2)  988/     5AF : C2 01               		dw 1C2h		; A#5
(2)  989/     5B1 : E0 01               		dw 1E0h		; B-5
(2)  990/     5B3 : F8 01               		dw 1F8h		; C-6 44100 +12
(2)  991/     5B5 : 10 02               		dw 210h		; C#6
(2)  992/     5B7 : 40 02               		dw 240h		; D-6
(2)  993/     5B9 : 60 02               		dw 260h		; D#6
(2)  994/     5BB : 80 02               		dw 280h		; E-6
(2)  995/     5BD : A0 02               		dw 2A0h		; F-6
(2)  996/     5BF : D0 02               		dw 2D0h		; F#6
(2)  997/     5C1 : F8 02               		dw 2F8h		; G-6
(2)  998/     5C3 : 20 03               		dw 320h		; G#6
(2)  999/     5C5 : 50 03               		dw 350h		; A-6
(2) 1000/     5C7 : 80 03               		dw 380h		; A#6
(2) 1001/     5C9 : C0 03               		dw 3C0h		; B-6
(2) 1002/     5CB : 00 04               		dw 400h		; C-7 88200
(2) 1003/     5CD : 00 01               		dw 100h
(2) 1004/     5CF : 00 01               		dw 100h
(2) 1005/     5D1 : 00 01               		dw 100h
(2) 1006/     5D3 : 00 01               		dw 100h
(2) 1007/     5D5 : 00 01               		dw 100h
(2) 1008/     5D7 : 00 01               		dw 100h	
(2) 1009/     5D9 : 00 01               		dw 100h
(2) 1010/     5DB : 00 01               		dw 100h
(2) 1011/     5DD : 00 01               		dw 100h
(2) 1012/     5DF : 00 01               		dw 100h
(2) 1013/     5E1 : 00 01               		dw 100h	
(2) 1014/     5E3 : 00 01               		dw 100h		; C-8
(2) 1015/     5E5 : 00 01               		dw 100h
(2) 1016/     5E7 : 00 01               		dw 100h
(2) 1017/     5E9 : 00 01               		dw 100h
(2) 1018/     5EB : 00 01               		dw 100h
(2) 1019/     5ED : 00 01               		dw 100h
(2) 1020/     5EF : 00 01               		dw 100h	
(2) 1021/     5F1 : 00 01               		dw 100h
(2) 1022/     5F3 : 00 01               		dw 100h
(2) 1023/     5F5 : 00 01               		dw 100h
(2) 1024/     5F7 : 00 01               		dw 100h
(2) 1025/     5F9 : 00 01               		dw 100h	
(2) 1026/     5FB : 00 01               		dw 100h		; C-9
(2) 1027/     5FD : 00 01               		dw 100h
(2) 1028/     5FF : 00 01               		dw 100h
(2) 1029/     601 : 00 01               		dw 100h
(2) 1030/     603 : 00 01               		dw 100h
(2) 1031/     605 : 00 01               		dw 100h
(2) 1032/     607 : 00 01               		dw 100h	
(2) 1033/     609 : 00 01               		dw 100h
(2) 1034/     60B : 00 01               		dw 100h
(2) 1035/     60D : 00 01               		dw 100h
(2) 1036/     60F : 00 01               		dw 100h
(2) 1037/     611 : 00 01               		dw 100h
(2) 1038/     613 :                     
(2) 1039/     613 : 84 02               fmFreq_List:	dw 644		; C-0
(2) 1040/     615 : A9 02               		dw 681
(2) 1041/     617 : D2 02               		dw 722
(2) 1042/     619 : FD 02               		dw 765
(2) 1043/     61B : 2A 03               		dw 810
(2) 1044/     61D : 5A 03               		dw 858
(2) 1045/     61F : 8E 03               		dw 910
(2) 1046/     621 : C4 03               		dw 964
(2) 1047/     623 : FD 03               		dw 1021
(2) 1048/     625 : 39 04               		dw 1081
(2) 1049/     627 : 7A 04               		dw 1146
(2) 1050/     629 : BE 04               		dw 1214
(2) 1051/     62B :                     
(2) 1052/     62B :                     psgFreq_List:
(2) 1053/     62B : FF FF               		dw -1		; C-0 $0
(2) 1054/     62D : FF FF               		dw -1
(2) 1055/     62F : FF FF               		dw -1
(2) 1056/     631 : FF FF               		dw -1
(2) 1057/     633 : FF FF               		dw -1
(2) 1058/     635 : FF FF               		dw -1
(2) 1059/     637 : FF FF               		dw -1
(2) 1060/     639 : FF FF               		dw -1
(2) 1061/     63B : FF FF               		dw -1
(2) 1062/     63D : FF FF               		dw -1
(2) 1063/     63F : FF FF               		dw -1
(2) 1064/     641 : FF FF               		dw -1
(2) 1065/     643 : FF FF               		dw -1		; C-1 $C
(2) 1066/     645 : FF FF               		dw -1
(2) 1067/     647 : FF FF               		dw -1
(2) 1068/     649 : FF FF               		dw -1
(2) 1069/     64B : FF FF               		dw -1
(2) 1070/     64D : FF FF               		dw -1
(2) 1071/     64F : FF FF               		dw -1
(2) 1072/     651 : FF FF               		dw -1
(2) 1073/     653 : FF FF               		dw -1
(2) 1074/     655 : FF FF               		dw -1
(2) 1075/     657 : FF FF               		dw -1
(2) 1076/     659 : FF FF               		dw -1
(2) 1077/     65B : FF FF               		dw -1		; C-2 $18
(2) 1078/     65D : FF FF               		dw -1
(2) 1079/     65F : FF FF               		dw -1
(2) 1080/     661 : FF FF               		dw -1
(2) 1081/     663 : FF FF               		dw -1
(2) 1082/     665 : FF FF               		dw -1
(2) 1083/     667 : FF FF               		dw -1
(2) 1084/     669 : FF FF               		dw -1
(2) 1085/     66B : FF FF               		dw -1
(2) 1086/     66D : FF FF               		dw -1
(2) 1087/     66F : FF FF               		dw -1
(2) 1088/     671 : FF FF               		dw -1
(2) 1089/     673 : FF FF               		dw -1		; C-3 $24
(2) 1090/     675 : FF FF               		dw -1
(2) 1091/     677 : FF FF               		dw -1
(2) 1092/     679 : FF FF               		dw -1
(2) 1093/     67B : FF FF               		dw -1
(2) 1094/     67D : FF FF               		dw -1
(2) 1095/     67F : FF FF               		dw -1
(2) 1096/     681 : FF FF               		dw -1
(2) 1097/     683 : FF FF               		dw -1
(2) 1098/     685 : F8 03               		dw 3F8h
(2) 1099/     687 : BF 03               		dw 3BFh
(2) 1100/     689 : 89 03               		dw 389h
(2) 1101/     68B : 56 03               		dw 356h		;C-4 30
(2) 1102/     68D : 26 03               		dw 326h
(2) 1103/     68F : F9 02               		dw 2F9h
(2) 1104/     691 : CE 02               		dw 2CEh
(2) 1105/     693 : A5 02               		dw 2A5h
(2) 1106/     695 : 80 02               		dw 280h
(2) 1107/     697 : 5C 02               		dw 25Ch
(2) 1108/     699 : 3A 02               		dw 23Ah
(2) 1109/     69B : 1A 02               		dw 21Ah
(2) 1110/     69D : FB 01               		dw 1FBh
(2) 1111/     69F : DF 01               		dw 1DFh
(2) 1112/     6A1 : C4 01               		dw 1C4h
(2) 1113/     6A3 : AB 01               		dw 1ABh		;C-5 3C
(2) 1114/     6A5 : 93 01               		dw 193h
(2) 1115/     6A7 : 7D 01               		dw 17Dh
(2) 1116/     6A9 : 67 01               		dw 167h
(2) 1117/     6AB : 53 01               		dw 153h
(2) 1118/     6AD : 40 01               		dw 140h
(2) 1119/     6AF : 2E 01               		dw 12Eh
(2) 1120/     6B1 : 1D 01               		dw 11Dh
(2) 1121/     6B3 : 0D 01               		dw 10Dh
(2) 1122/     6B5 : FE 00               		dw 0FEh
(2) 1123/     6B7 : EF 00               		dw 0EFh
(2) 1124/     6B9 : E2 00               		dw 0E2h
(2) 1125/     6BB : D6 00               		dw 0D6h		;C-6 48
(2) 1126/     6BD : C9 00               		dw 0C9h
(2) 1127/     6BF : BE 00               		dw 0BEh
(2) 1128/     6C1 : B4 00               		dw 0B4h
(2) 1129/     6C3 : A9 00               		dw 0A9h
(2) 1130/     6C5 : A0 00               		dw 0A0h
(2) 1131/     6C7 : 97 00               		dw 97h
(2) 1132/     6C9 : 8F 00               		dw 8Fh
(2) 1133/     6CB : 87 00               		dw 87h
(2) 1134/     6CD : 7F 00               		dw 7Fh
(2) 1135/     6CF : 78 00               		dw 78h
(2) 1136/     6D1 : 71 00               		dw 71h
(2) 1137/     6D3 : 6B 00               		dw 6Bh		; C-7 54
(2) 1138/     6D5 : 65 00               		dw 65h
(2) 1139/     6D7 : 5F 00               		dw 5Fh
(2) 1140/     6D9 : 5A 00               		dw 5Ah
(2) 1141/     6DB : 55 00               		dw 55h
(2) 1142/     6DD : 50 00               		dw 50h
(2) 1143/     6DF : 4B 00               		dw 4Bh
(2) 1144/     6E1 : 47 00               		dw 47h
(2) 1145/     6E3 : 43 00               		dw 43h
(2) 1146/     6E5 : 40 00               		dw 40h
(2) 1147/     6E7 : 3C 00               		dw 3Ch
(2) 1148/     6E9 : 39 00               		dw 39h
(2) 1149/     6EB : 36 00               		dw 36h		; C-8 $60
(2) 1150/     6ED : 33 00               		dw 33h
(2) 1151/     6EF : 30 00               		dw 30h
(2) 1152/     6F1 : 2D 00               		dw 2Dh
(2) 1153/     6F3 : 2B 00               		dw 2Bh
(2) 1154/     6F5 : 28 00               		dw 28h
(2) 1155/     6F7 : 26 00               		dw 26h
(2) 1156/     6F9 : 24 00               		dw 24h
(2) 1157/     6FB : 22 00               		dw 22h
(2) 1158/     6FD : 20 00               		dw 20h
(2) 1159/     6FF : 1F 00               		dw 1Fh
(2) 1160/     701 : 1D 00               		dw 1Dh
(2) 1161/     703 : 1B 00               		dw 1Bh		; C-9 $6C
(2) 1162/     705 : 1A 00               		dw 1Ah
(2) 1163/     707 : 18 00               		dw 18h
(2) 1164/     709 : 17 00               		dw 17h
(2) 1165/     70B : 16 00               		dw 16h
(2) 1166/     70D : 15 00               		dw 15h
(2) 1167/     70F : 13 00               		dw 13h
(2) 1168/     711 : 12 00               		dw 12h
(2) 1169/     713 : 11 00               		dw 11h
(2) 1170/     715 : 10 00                		dw 10h
(2) 1171/     717 : 09 00                		dw 9h
(2) 1172/     719 : 08 00                		dw 8h
(2) 1173/     71B : 00 00               		dw 0		; use +60 if using C-5 for tone 3 noise
(2) 1174/     71D :                     
(2) 1175/     71D :                     patch_Data	ds 40h*16
(2) 1176/     B1D :                     
(2) 1177/     B1D :                     ; ====================================================================
(2) 1178/     B1D :                     ; ----------------------------------------------------------------
(2) 1179/     B1D :                     ; Z80 RAM
(2) 1180/     B1D :                     ; ----------------------------------------------------------------
(2) 1181/     B1D :                     
(2) 1182/     B1D :                     ; --------------------------------------------------------
(2) 1183/     B1D :                     ; Internal
(2) 1184/     B1D :                     ; --------------------------------------------------------
(2) 1185/     B1D :                     
(2) 1186/     B1D :                     		align 100h
(2) 1187/     C00 :                     dWaveBuff	ds 100h				; WAVE data buffer, updated by 128bytes
(2) 1188/     D00 :                     cmdfifo		ds 64				; Buffer for command requests
(2) 1189/     D40 :                     
(2) 1190/     D40 :                     MBOXES		ds 32				; GEMS mailboxes
(2) 1191/     D60 :                     
(2) 1192/     D60 : 00 00               tickFlag	dw 0				; Tick flag (from VBlank), Use tickFlag+1 for reading/reseting
(2) 1193/     D62 : 00                  tickCnt		db 0				; Tick counter (KEEP IT AFTER tickFlag)
(2) 1194/     D63 :                     
(2) 1195/     D63 : CC 00               sbeatPtck	dw 204				; sub beats per tick (8frac), default is 120bpm
(2) 1196/     D65 : 00 00               sbeatAcc	dw 0				; accumulates ^^ each tick to track sub beats
(2) 1197/     D67 : 00                  currTickBits	db 0				; (old: TBASEFLAGS)		      
(2) 1198/     D68 : 00 00 00            dDacPntr	db 0,0,0			; WAVE current ROM position
(2) 1199/     D6B : 00 00 00            dDacCntr	db 0,0,0			; WAVE length counter
(2) 1200/     D6E : 00                  dDacFifoMid	db 0				; WAVE current FIFO next halfway section
(2) 1201/     D6F : 00                  x68ksrclsb	db 0
(2) 1202/     D70 : 00                  x68ksrcmid	db 0
(2) 1203/     D71 : 00                  commZRead	db 0				; read pointer (here)
(2) 1204/     D72 : 00                  commZWrite	db 0				; cmd fifo wptr (from 68k)
(2) 1205/     D73 : 00                  commZRomBlk	db 0				; 68k ROM block flag
(2) 1206/     D74 : 00                  commZRomRd	db 0				; Z80 is reading ROM bit
(2) 1207/     D75 :                     
(2) 1208/     D75 : 00 00 00 00         psgcom		db 00h,00h,00h,00h		;  0 command 1 = key on, 2 = key off, 4 = stop snd
(2) 1209/     D79 : FF FF FF FF         psglev		db  -1, -1, -1, -1		;  4 output level attenuation (4 bit)
(2) 1210/     D7D : 00 00 00 00         psgatk		db 00h,00h,00h,00h		;  8 attack rate
(2) 1211/     D81 : 00 00 00 00         psgdec		db 00h,00h,00h,00h		; 12 decay rate
(2) 1212/     D85 : 00 00 00 00         psgslv		db 00h,00h,00h,00h		; 16 sustain level attenuation
(2) 1213/     D89 : 00 00 00 00         psgrrt		db 00h,00h,00h,00h		; 20 release rate
(2) 1214/     D8D : 00 00 00 00         psgenv		db 00h,00h,00h,00h		; 24 envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain, 4
(2) 1215/     D91 : 00 00 00 00         psgdtl		db 00h,00h,00h,00h		; 28 tone bottom 4 bits, noise bits
(2) 1216/     D95 : 00 00 00 00         psgdth		db 00h,00h,00h,00h		; 32 tone upper 6 bits
(2) 1217/     D99 : 00 00 00 00         psgalv		db 00h,00h,00h,00h		; 36 attack level attenuation
(2) 1218/     D9D : 00 00 00 00         whdflg		db 00h,00h,00h,00h		; 40 flags to indicate hardware should be updated
(2) 1219/     DA1 :                     
(2) 1220/     DA1 :                     ; dynamic chip allocation
(2) 1221/     DA1 : 80 00 50 00 00 00   FMVTBL		db 080H,0,050H,0,0,0,0		; fm voice 0
                    00 
(2) 1222/     DA8 : 81 00 50 00 00 00   		db 081H,0,050H,0,0,0,0		; fm voice 1
                    00 
(2) 1223/     DAF : 84 00 50 00 00 00   		db 084H,0,050H,0,0,0,0		; fm voice 3
                    00 
(2) 1224/     DB6 : 85 00 50 00 00 00   		db 085H,0,050H,0,0,0,0		; fm voice 4
                    00 
(2) 1225/     DBD : 86 00 50 00 00 00   FMVTBLCH6	db 086H,0,050H,0,0,0,0		; fm voice 5 (supports digital)
                    00 
(2) 1226/     DC4 : 82 00 50 00 00 00   FMVTBLCH3	db 082H,0,050H,0,0,0,0		; fm voice 2 (supports CH3 poly mode)
                    00 
(2) 1227/     DCB : FF                  		db -1
(2) 1228/     DCC : 80 00 50 00 00 00   PSGVTBL		db 080H,0,050H,0,0,0,0		; normal type voice, number 0
                    00 
(2) 1229/     DD3 : 81 00 50 00 00 00   		db 081H,0,050H,0,0,0,0		; normal type voice, number 1
                    00 
(2) 1230/     DDA : 82 00 50 00 00 00   PSGVTBLTG3	db 082H,0,050H,0,0,0,0		; normal type voice, number 2
                    00 
(2) 1231/     DE1 : FF                  		db -1
(2) 1232/     DE2 : 83 00 50 00 00 00   PSGVTBLNG	db 083H,0,050H,0,0,0,0		; noise type voice, number 3
                    00 
(2) 1233/     DE9 : FF                  		db -1
(2) 1234/     DEA :                     	
(2) 1235/     DEA :                     
(2) 1236/     DEA :                     ; --------------------------------------------------------
(2) 1237/     DEA :                     ; WAVE playback
(2) 1238/     DEA :                     ; 
(2) 1239/     DEA :                     ; START: 68k direct pointer ($xxxxxx)
(2) 1240/     DEA :                     ; LOOP:  sampleloop point
(2) 1241/     DEA :                     ; END:   sample length (endpointer-startpointer)
(2) 1242/     DEA :                     ; --------------------------------------------------------
(2) 1243/     DEA :                     
(2) 1244/     DEA : 00 80               wave_Start	dw TEST_WAV&0FFFFh
(2) 1245/     DEC : 00                  		db TEST_WAV>>16&0FFh
(2) 1246/     DED : 04 5D               wave_End	dw (TEST_WAV_E-TEST_WAV)&0FFFFh
(2) 1247/     DEF : 24                  		db (TEST_WAV_E-TEST_WAV)>>16
(2) 1248/     DF0 : 00 00               wave_Loop	dw 0
(2) 1249/     DF2 : 00                  		db 0
(2) 1250/     DF3 : 00 01               wave_Pitch	dw 100h				; 01.00h
(2) 1251/     DF5 : 05                  wav_Flags	db 101b				; WAVE playback flags (%1xx: 01 loop / 10 no loop)
(2) 1252/     DF6 :                     
(2) 1253/     DF6 :                     ; ====================================================================
(2) 1254/     DF6 :                     ; ----------------------------------------------------------------
(2) 1255/     DF6 :                     ; GAME MUSIC/SOUND DATA GOES HERE
(2) 1256/     DF6 :                     ; ----------------------------------------------------------------
(2) 1257/     DF6 :                     
(2) 1258/     DF6 :                     ; ----------------------------------------------------
(2) 1259/     DF6 :                     ; PSG Instruments
(2) 1260/     DF6 :                     ; ----------------------------------------------------
(2) 1261/     DF6 :                     
(2) 1262/     DF6 : 00                  PsgIns_00:	db 0
(2) 1263/     DF7 : FF                  		db -1
(2) 1264/     DF8 : 00 02 04 05 06      PsgIns_01:	db 0,2,4,5,6
(2) 1265/     DFD : FF                  		db -1
(2) 1266/     DFE : 00 0F               PsgIns_02:	db 0,15
(2) 1267/     E00 : FF                  		db -1
(2) 1268/     E01 : 00 00 01 01 02 02   PsgIns_03:	db 0,0,1,1,2,2,3,4,6,10,15
                    03 04 06 0A 0F 
(2) 1269/     E0C : FF                  		db -1
(2) 1270/     E0D : 00 02 04 06 0A      PsgIns_04:	db 0,2,4,6,10
(2) 1271/     E12 : FF                  		db -1	
(2) 1272/     E13 :                     		align 4
(2) 1273/     E14 :                     		
(2) 1274/     E14 :                     ; ----------------------------------------------------
(2) 1275/     E14 :                     ; FM Instruments
(2) 1276/     E14 :                     ; ----------------------------------------------------
(2) 1277/     E14 :                     
(2) 1278/     E14 :                     ; .gsx instruments; filename,$2478,$20 ($28 for FM3 instruments)
(2) 1279/     E14 :                     FmIns_Fm3_OpenHat:
(2) 1280/     E14 :                     		binclude "game/sound/instr/fm/fm3_openhat.gsx",2478h,28h
(2) 1281/     E3C :                     FmIns_Fm3_ClosedHat:
(2) 1282/     E3C :                     		binclude "game/sound/instr/fm/fm3_closedhat.gsx",2478h,28h
(2) 1283/     E64 :                     FmIns_DrumKick:
(2) 1284/     E64 :                     		binclude "game/sound/instr/fm/drum_kick.gsx",2478h,20h
(2) 1285/     E84 :                     FmIns_DrumSnare:
(2) 1286/     E84 :                     		binclude "game/sound/instr/fm/drum_snare.gsx",2478h,20h
(2) 1287/     EA4 :                     FmIns_DrumCloseHat:
(2) 1288/     EA4 :                     		binclude "game/sound/instr/fm/drum_closehat.gsx",2478h,20h
(2) 1289/     EC4 :                     FmIns_Piano_m1:
(2) 1290/     EC4 :                     		binclude "game/sound/instr/fm/piano_m1.gsx",2478h,20h
(2) 1291/     EE4 :                     FmIns_Bass_gum:
(2) 1292/     EE4 :                     		binclude "game/sound/instr/fm/bass_gum.gsx",2478h,20h
(2) 1293/     F04 :                     FmIns_Bass_calm:
(2) 1294/     F04 :                     		binclude "game/sound/instr/fm/bass_calm.gsx",2478h,20h
(2) 1295/     F24 :                     FmIns_Bass_heavy:
(2) 1296/     F24 :                     		binclude "game/sound/instr/fm/bass_heavy.gsx",2478h,20h
(2) 1297/     F44 :                     FmIns_Bass_ambient:
(2) 1298/     F44 :                     		binclude "game/sound/instr/fm/bass_ambient.gsx",2478h,20h
(2) 1299/     F64 :                     FmIns_Brass_gummy:
(2) 1300/     F64 :                     		binclude "game/sound/instr/fm/brass_gummy.gsx",2478h,20h
(2) 1301/     F84 :                     FmIns_Flaute_1:
(2) 1302/     F84 :                     		binclude "game/sound/instr/fm/flaute_1.gsx",2478h,20h
(2) 1303/     FA4 :                     FmIns_Bass_2:
(2) 1304/     FA4 :                     		binclude "game/sound/instr/fm/bass_2.gsx",2478h,20h
(2) 1305/     FC4 :                     FmIns_Bass_3:
(2) 1306/     FC4 :                     		binclude "game/sound/instr/fm/bass_3.gsx",2478h,20h
(2) 1307/     FE4 :                     FmIns_Bass_5:
(2) 1308/     FE4 :                     		binclude "game/sound/instr/fm/bass_5.gsx",2478h,20h
(2) 1309/    1004 :                     FmIns_Bass_synth:
(2) 1310/    1004 :                     		binclude "game/sound/instr/fm/bass_synth_1.gsx",2478h,20h
(2) 1311/    1024 :                     FmIns_Guitar_1:
(2) 1312/    1024 :                     		binclude "game/sound/instr/fm/guitar_1.gsx",2478h,20h
(2) 1313/    1044 :                     FmIns_Horn_1:
(2) 1314/    1044 :                     		binclude "game/sound/instr/fm/horn_1.gsx",2478h,20h
(2) 1315/    1064 :                     FmIns_Organ_M1:
(2) 1316/    1064 :                     		binclude "game/sound/instr/fm/organ_m1.gsx",2478h,20h
(2) 1317/    1084 :                     FmIns_Bass_Beach:
(2) 1318/    1084 :                     		binclude "game/sound/instr/fm/bass_beach.gsx",2478h,20h
(2) 1319/    10A4 :                     FmIns_Bass_Beach_2:
(2) 1320/    10A4 :                     		binclude "game/sound/instr/fm/bass_beach_2.gsx",2478h,20h
(2) 1321/    10C4 :                     FmIns_Brass_Cave:
(2) 1322/    10C4 :                     		binclude "game/sound/instr/fm/brass_cave.gsx",2478h,20h
(2) 1323/    10E4 :                     FmIns_Piano_Small:
(2) 1324/    10E4 :                     		binclude "game/sound/instr/fm/piano_small.gsx",2478h,20h
(2) 1325/    1104 :                     FmIns_Trumpet_2:
(2) 1326/    1104 :                     		binclude "game/sound/instr/fm/trumpet_2.gsx",2478h,20h
(2) 1327/    1124 :                     FmIns_Bell_Glass:
(2) 1328/    1124 :                     		binclude "game/sound/instr/fm/bell_glass.gsx",2478h,20h
(2) 1329/    1144 :                     FmIns_Marimba_1:
(2) 1330/    1144 :                     		binclude "game/sound/instr/fm/marimba_1.gsx",2478h,20h
(2) 1331/    1164 :                     FmIns_Ambient_dark:
(2) 1332/    1164 :                     		binclude "game/sound/instr/fm/ambient_dark.gsx",2478h,20h
(2) 1333/    1184 :                     FmIns_Ambient_spook:
(2) 1334/    1184 :                     		binclude "game/sound/instr/fm/ambient_spook.gsx",2478h,20h
(2) 1335/    11A4 :                     FmIns_Ding_toy:
(2) 1336/    11A4 :                     		binclude "game/sound/instr/fm/ding_toy.gsx",2478h,20h
(2) 1337/    11C4 :                     
(1)   20/    11C4 :                     		
(1)   21/    11C4 :                     ; ====================================================================
(1)   22/    11C4 :                     
(1)   23/    11C4 :                     		cpu 68000
(1)   24/    11C4 :                     		padding off
(1)   25/    14C4 :                     		phase Z80_CODE+*
(1)   26/    14C4 :                     Z80_CODE_END:
(1)   27/    14C4 :                     		align 2
(1)   28/    14C4 :                     
(1)   29/    14C4 :                     ; ====================================================================
(1)   30/    14C4 :                     ; ----------------------------------------------------------------
(1)   31/    14C4 :                     ; Subroutines
(1)   32/    14C4 :                     ; ----------------------------------------------------------------
(1)   33/    14C4 :                     
(1)   34/    14C4 :                     ; --------------------------------------------------------
(1)   35/    14C4 :                     ; Init Sound
(1)   36/    14C4 :                     ; 
(1)   37/    14C4 :                     ; Uses:
(1)   38/    14C4 :                     ; a0-a1,d0-d1
(1)   39/    14C4 :                     ; --------------------------------------------------------
(1)   40/    14C4 :                     
(1)   41/    14C4 :                     Sound_Init:
(1)   42/    14C4 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   43/    14CC : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   44/    14D4 :                     .wait:
(1)   45/    14D4 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)   46/    14DC : 66F6                		bne.s	.wait
(1)   47/    14DE : 41F9 00A0 0000      		lea	(z80_cpu).l,a0
(1)   48/    14E4 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   49/    14E8 : 7200                		moveq	#0,d1
(1)   50/    14EA :                     .cleanup:
(1)   51/    14EA : 10C1                		move.b	d1,(a0)+
(1)   52/    14EC : 51C8 FFFC           		dbf	d0,.cleanup
(1)   53/    14F0 : 41F9 0000 0300      		lea	(Z80_CODE).l,a0			; Send sound code
(1)   54/    14F6 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1
(1)   55/    14FC : 303C 11C3           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0
(1)   56/    1500 :                     .copy:
(1)   57/    1500 : 12D8                		move.b	(a0)+,(a1)+
(1)   58/    1502 : 51C8 FFFC           		dbf	d0,.copy
(1)   59/    1506 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   60/    150E : 4E71                		nop 
(1)   61/    1510 : 4E71                		nop 
(1)   62/    1512 : 4E71                		nop 
(1)   63/    1514 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   64/    151C : 4E75                		rts
(1)   65/    151E :                     
(1)   66/    151E :                     ; --------------------------------------------------------
(1)   67/    151E :                     ; Sound_DMA_Start
(1)   68/    151E :                     ; 
(1)   69/    151E :                     ; Call this before doing any DMA task
(1)   70/    151E :                     ; --------------------------------------------------------
(1)   71/    151E :                     
(1)   72/    151E :                     Sound_DMA_Start:
(1)   73/    151E : 40E7                		move.w	sr,-(sp)
(1)   74/    1520 : 007C 0700           		or.w	#$700,sr
(1)   75/    1524 :                     .retry:
(1)   76/    1524 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   77/    152C :                     .wait:
(1)   78/    152C : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)   79/    1534 : 66F6                		bne.s	.wait
(1)   80/    1536 : 13FC 0001 00A0 0D73 		move.b	#1,(z80_cpu+commZRomBlk)	; Tell Z80 we want the bus
(1)   81/    153E : 1039 00A0 0D74      		move.b	(z80_cpu+commZRomRd),d0		; Get mid-read bit
(1)   82/    1544 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Resume Z80
(1)   83/    154C : 4A00                		tst.b	d0
(1)   84/    154E : 6708                		beq.s	.safe
(1)   85/    1550 : 7044                		moveq	#68,d0
(1)   86/    1552 : 51C8 FFFE           		dbf	d0,*
(1)   87/    1556 : 60CC                		bra.s	.retry
(1)   88/    1558 :                     .safe:
(1)   89/    1558 : 46DF                		move.w	(sp)+,sr
(1)   90/    155A : 4E75                		rts
(1)   91/    155C :                     
(1)   92/    155C :                     ; --------------------------------------------------------
(1)   93/    155C :                     ; Sound_DMA_End
(1)   94/    155C :                     ; 
(1)   95/    155C :                     ; Call this after finishing DMA
(1)   96/    155C :                     ; --------------------------------------------------------
(1)   97/    155C :                     
(1)   98/    155C :                     Sound_DMA_End:
(1)   99/    155C : 40E7                		move.w	sr,-(sp)
(1)  100/    155E : 007C 0700           		or.w	#$700,sr
(1)  101/    1562 : 610E                		bsr	sndLockZ80
(1)  102/    1564 : 13FC 0000 00A0 0D73 		move.b	#0,(z80_cpu+commZRomBlk)	
(1)  103/    156C : 6118                		bsr	sndUnlockZ80
(1)  104/    156E : 46DF                		move.w	(sp)+,sr
(1)  105/    1570 : 4E75                		rts
(1)  106/    1572 :                     
(1)  107/    1572 :                     ; ------------------------------------------------
(1)  108/    1572 :                     
(1)  109/    1572 :                     sndLockZ80:
(1)  110/    1572 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)  111/    157A :                     .wait:
(1)  112/    157A : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)  113/    1582 : 66F6                		bne.s	.wait
(1)  114/    1584 : 4E75                		rts
(1)  115/    1586 :                     sndUnlockZ80:
(1)  116/    1586 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  117/    158E : 4E75                		rts
(1)  118/    1590 :                     sndSendCmd:
(1)  119/    1590 : 4E75                		rts
(1)  120/    1592 :                     
      39/    1592 :                     		include "system/md/video.asm"		; Video
(1)    1/    1592 :                     ; ====================================================================
(1)    2/    1592 :                     ; ----------------------------------------------------------------
(1)    3/    1592 :                     ; MD Video
(1)    4/    1592 :                     ; ----------------------------------------------------------------
(1)    5/    1592 :                     
(1)    6/    1592 :                     ; --------------------------------------------------------
(1)    7/    1592 :                     ; Init Video
(1)    8/    1592 :                     ; 
(1)    9/    1592 :                     ; Uses:
(1)   10/    1592 :                     ; a0-a2,d0-d1
(1)   11/    1592 :                     ; --------------------------------------------------------
(1)   12/    1592 :                     
(1)   13/    1592 :                     Video_Init:
(1)   14/    1592 : 41FA 059E           		lea	list_vdpregs(pc),a0	; a0 - Input data for default register data
(1)   15/    1596 : 43F8 A010           		lea	(RAM_VdpCache),a1	; a1 - Ouptut register bytes for fast access
(1)   16/    159A : 45F9 00C0 0004      		lea	(vdp_ctrl),a2		; a2 - VDP control port
(1)   17/    15A0 : 303C 8000           		move.w	#$8000,d0		; d0 - $8000, start at first register
(1)   18/    15A4 : 7212                		moveq	#19-1,d1		; d1 - 19 registers, minus 1
(1)   19/    15A6 :                     .loop:
(1)   20/    15A6 : 1018                		move.b	(a0)+,d0		; Grab BYTE from the list, d0 = $8?xx, increment
(1)   21/    15A8 : 12C0                		move.b	d0,(a1)+		; Write BYTE $00xx to RAM, increment
(1)   22/    15AA : 3480                		move.w	d0,(a2)			; Write WORD $xxxx register to control port
(1)   23/    15AC : D07C 0100           		add.w	#$100,d0		; next register, d0 += 0x0100
(1)   24/    15B0 : 51C9 FFF4           		dbf	d1,.loop		; loop until d1 == 0
(1)   25/    15B4 :                     		
(1)   26/    15B4 : 303C 0000           		move.w	#0,d0			; Clear almost all of VRAM
(1)   27/    15B8 : 323C FFE0           		move.w	#$7FF*$20,d1
(1)   28/    15BC : 343C 0001           		move.w	#1,d2
(1)   29/    15C0 : 6000 03E2           		bra	Video_Fill
(1)   30/    15C4 :                     
(1)   31/    15C4 :                     ; --------------------------------------------------------
(1)   32/    15C4 :                     ; Video_InitPrint
(1)   33/    15C4 :                     ; 
(1)   34/    15C4 :                     ; Call this before using any on-screen text print
(1)   35/    15C4 :                     ; 
(1)   36/    15C4 :                     ; Graphics will be located at $5A0
(1)   37/    15C4 :                     ; (ASCII starts at $580)
(1)   38/    15C4 :                     ; Uses palette line 4
(1)   39/    15C4 :                     ; 
(1)   40/    15C4 :                     ; Uses:
(1)   41/    15C4 :                     ; a0-a2,d0-d1
(1)   42/    15C4 :                     ; --------------------------------------------------------
(1)   43/    15C4 :                     
(1)   44/    15C4 :                     Video_InitPrint:
(1)   45/    15C4 :                     ; 		move.w	#$580|$6000,(RAM_VidPrntVram).w	; VRAM | Palette 4
(1)   46/    15C4 : 31FC 0000 A088      		move.w	#0,(RAM_VidPrntVram).w	; VRAM | Palette 4
(1)   47/    15CA : 203C 0000 1B46      		move.l	#Art_PrintFont,d0
(1)   48/    15D0 : 323C 0C00           		move.w	#(Art_PrintFont_e-Art_PrintFont),d1
(1)   49/    15D4 : 343C 05A0           		move.w	#$580+$20,d2
(1)   50/    15D8 : 6100 04C4           		bsr	Video_LoadArt
(1)   51/    15DC : 41FA 1168           		lea	Pal_PrintFont(pc),a0
(1)   52/    15E0 : 7030                		moveq	#$30,d0
(1)   53/    15E2 : 323C 0004           		move.w	#4,d1
(1)   54/    15E6 : 6072                		bra	Video_LoadPal
(1)   55/    15E8 :                     		
(1)   56/    15E8 :                     ; ====================================================================
(1)   57/    15E8 :                     ; ----------------------------------------------------------------
(1)   58/    15E8 :                     ; Video subroutines
(1)   59/    15E8 :                     ; ----------------------------------------------------------------
(1)   60/    15E8 :                     
(1)   61/    15E8 :                     ; ---------------------------------
(1)   62/    15E8 :                     ; Video_Update
(1)   63/    15E8 :                     ; 
(1)   64/    15E8 :                     ; Update registers from cache
(1)   65/    15E8 :                     ; to VDP
(1)   66/    15E8 :                     ; 
(1)   67/    15E8 :                     ; Uses:
(1)   68/    15E8 :                     ; d4-d5,a4-a5
(1)   69/    15E8 :                     ; ---------------------------------
(1)   70/    15E8 :                     
(1)   71/    15E8 :                     Video_Update:
(1)   72/    15E8 : 49F8 A010           		lea	(RAM_VdpCache).w,a4
(1)   73/    15EC : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)   74/    15F2 : 383C 8000           		move.w	#$8000,d4
(1)   75/    15F6 : 3A3C 0010           		move.w	#17-1,d5
(1)   76/    15FA :                     .loop:
(1)   77/    15FA : 181C                		move.b	(a4)+,d4
(1)   78/    15FC : 3A84                		move.w	d4,(a5)
(1)   79/    15FE : D87C 0100           		add.w	#$100,d4
(1)   80/    1602 : 51CD FFF6           		dbf	d5,.loop
(1)   81/    1606 :                     .exit:
(1)   82/    1606 : 4E75                		rts
(1)   83/    1608 :                     
(1)   84/    1608 :                     ; --------------------------------------------------------
(1)   85/    1608 :                     ; Video_Clear
(1)   86/    1608 :                     ; 
(1)   87/    1608 :                     ; Clear background layers
(1)   88/    1608 :                     ; --------------------------------------------------------
(1)   89/    1608 :                     
(1)   90/    1608 :                     Video_Clear:
(1)   91/    1608 : 6100 035E           		bsr	vid_PickSize
(1)   92/    160C : 3204                		move.w	d4,d1
(1)   93/    160E :                     
(1)   94/    160E : 7000                		moveq	#0,d0
(1)   95/    1610 : 1439 FFFF A012      		move.b	(RAM_VdpCache+2).l,d2	; FG
(1)   96/    1616 : 0242 0038           		andi.w	#%111000,d2
(1)   97/    161A : E14A                		lsl.w	#8,d2
(1)   98/    161C : E54A                		lsl.w	#2,d2
(1)   99/    161E : 6100 0384           		bsr	Video_Fill
(1)  100/    1622 : 1439 FFFF A013      		move.b	(RAM_VdpCache+3).l,d2	; BG
(1)  101/    1628 : 0242 0007           		andi.w	#%000111,d2
(1)  102/    162C : E14A                		lsl.w	#8,d2
(1)  103/    162E : EB4A                		lsl.w	#5,d2
(1)  104/    1630 : 6100 0372           		bsr	Video_Fill
(1)  105/    1634 :                     
(1)  106/    1634 : 323C 07FF           		move.w	#$7FF,d1		; WD Size
(1)  107/    1638 : 1439 FFFF A01C      		move.b	(RAM_VdpCache+$C).l,d2
(1)  108/    163E : C47C 0081           		and.w	#%10000001,d2
(1)  109/    1642 : 6704                		beq.s	.smlwdw
(1)  110/    1644 : 323C 0FFF           		move.w	#$FFF,d1
(1)  111/    1648 :                     .smlwdw:
(1)  112/    1648 : 1439 FFFF A014      		move.b	(RAM_VdpCache+4).l,d2	; Window
(1)  113/    164E : 0242 003E           		andi.w	#%111110,d2
(1)  114/    1652 : E14A                		lsl.w	#8,d2
(1)  115/    1654 : E54A                		lsl.w	#2,d2
(1)  116/    1656 : 6000 034C           		bra	Video_Fill
(1)  117/    165A :                     
(1)  118/    165A :                     ; --------------------------------------------------------
(1)  119/    165A :                     ; Video_LoadPal
(1)  120/    165A :                     ; 
(1)  121/    165A :                     ; Load palette to VDP
(1)  122/    165A :                     ; 
(1)  123/    165A :                     ; NOTE: Color dots will be shown on screen
(1)  124/    165A :                     ; 
(1)  125/    165A :                     ; Input:
(1)  126/    165A :                     ; a0 - Palette data
(1)  127/    165A :                     ; d0 - Start position
(1)  128/    165A :                     ; d1 - Number of colors - 1
(1)  129/    165A :                     ; 
(1)  130/    165A :                     ; Uses:
(1)  131/    165A :                     ; a4,d4
(1)  132/    165A :                     ; --------------------------------------------------------
(1)  133/    165A :                     
(1)  134/    165A :                     Video_LoadPal:
(1)  135/    165A : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  136/    1660 : 7800                		moveq	#0,d4
(1)  137/    1662 : 3800                		move.w	d0,d4
(1)  138/    1664 : D844                		add.w	d4,d4
(1)  139/    1666 : 0044 C000           		ori.w	#$C000,d4
(1)  140/    166A : 4844                		swap	d4
(1)  141/    166C : 2944 0004           		move.l	d4,4(a4)
(1)  142/    1670 : 3801                		move.w	d1,d4
(1)  143/    1672 :                     .loop:
(1)  144/    1672 : 3898                		move.w	(a0)+,(a4)
(1)  145/    1674 : 51CC FFFC           		dbf	d4,.loop
(1)  146/    1678 : 4E75                		rts
(1)  147/    167A :                     
(1)  148/    167A :                     ; --------------------------------------------------------
(1)  149/    167A :                     ; Video_LoadMap
(1)  150/    167A :                     ; 
(1)  151/    167A :                     ; Load map data, Horizontal order
(1)  152/    167A :                     ; 
(1)  153/    167A :                     ; a0 - Map data
(1)  154/    167A :                     ; d0 | LONG - 00|Layer|X|Y, locate(lyr,x,y)
(1)  155/    167A :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  156/    167A :                     ; d2 | WORD - VRAM
(1)  157/    167A :                     
(1)  158/    167A :                     ; Uses:
(1)  159/    167A :                     ; a4-a5,d4-d7
(1)  160/    167A :                     ; --------------------------------------------------------
(1)  161/    167A :                     
(1)  162/    167A :                     Video_LoadMap:
(1)  163/    167A : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  164/    1680 : 6100 024A           		bsr	vid_PickLayer
(1)  165/    1684 :                     		
(1)  166/    1684 :                     	; Start here
(1)  167/    1684 : 3A01                		move.w	d1,d5
(1)  168/    1686 :                     .yloop:
(1)  169/    1686 : 4845                		swap	d5
(1)  170/    1688 : 2944 0004           		move.l	d4,4(a4)
(1)  171/    168C : 2E01                		move.l	d1,d7
(1)  172/    168E : 4847                		swap	d7
(1)  173/    1690 :                     .xloop:
(1)  174/    1690 : 3A18                		move.w	(a0)+,d5
(1)  175/    1692 : BA7C FFFF           		cmp.w	#-1,d5
(1)  176/    1696 : 6606                		bne.s	.nonull
(1)  177/    1698 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  178/    169C : 6002                		bra.s	.cont
(1)  179/    169E :                     .nonull:
(1)  180/    169E : DA42                		add.w	d2,d5
(1)  181/    16A0 :                     .cont:
(1)  182/    16A0 : 4847                		swap	d7
(1)  183/    16A2 : 1E39 FFFF A01C      		move.b	(RAM_VdpCache+$C).l,d7
(1)  184/    16A8 : CE7C 0006           		and.w	#%110,d7
(1)  185/    16AC : BE7C 0006           		cmp.w	#%110,d7
(1)  186/    16B0 : 660E                		bne.s	.nodble
(1)  187/    16B2 : 3E05                		move.w	d5,d7
(1)  188/    16B4 : E24F                		lsr.w	#1,d7
(1)  189/    16B6 : CE7C 07FF           		and.w	#$7FF,d7
(1)  190/    16BA : CA7C F800           		and.w	#$F800,d5
(1)  191/    16BE : 8A47                		or.w	d7,d5
(1)  192/    16C0 :                     .nodble:
(1)  193/    16C0 : 4847                		swap	d7
(1)  194/    16C2 : 3885                		move.w	d5,(a4)
(1)  195/    16C4 : 51CF FFCA           		dbf	d7,.xloop
(1)  196/    16C8 : D886                		add.l	d6,d4
(1)  197/    16CA : 4845                		swap	d5
(1)  198/    16CC : 51CD FFB8           		dbf	d5,.yloop
(1)  199/    16D0 : 4E75                		rts
(1)  200/    16D2 :                     
(1)  201/    16D2 :                     ; --------------------------------------------------------
(1)  202/    16D2 :                     ; Video_LoadMap_Vert
(1)  203/    16D2 :                     ; 
(1)  204/    16D2 :                     ; Load map data, Vertical order
(1)  205/    16D2 :                     ; 
(1)  206/    16D2 :                     ; a0 - Map data
(1)  207/    16D2 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  208/    16D2 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  209/    16D2 :                     ; d2 | WORD - VRAM
(1)  210/    16D2 :                     
(1)  211/    16D2 :                     ; Uses:
(1)  212/    16D2 :                     ; a4-a5,d4-d7
(1)  213/    16D2 :                     ; --------------------------------------------------------
(1)  214/    16D2 :                     
(1)  215/    16D2 :                     Video_LoadMap_Vert:
(1)  216/    16D2 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  217/    16D8 : 6100 01F2           		bsr	vid_PickLayer
(1)  218/    16DC :                     		
(1)  219/    16DC :                     	; Start here
(1)  220/    16DC : 2A01                		move.l	d1,d5
(1)  221/    16DE : 4845                		swap	d5
(1)  222/    16E0 :                     .xloop:
(1)  223/    16E0 : 4845                		swap	d5
(1)  224/    16E2 : 2F04                		move.l	d4,-(sp)
(1)  225/    16E4 : 3E01                		move.w	d1,d7
(1)  226/    16E6 : 0839 0002 FFFF A01C 		btst	#2,(RAM_VdpCache+$C).l
(1)  227/    16EE : 6702                		beq.s	.yloop
(1)  228/    16F0 : E24F                		lsr.w	#1,d7
(1)  229/    16F2 :                     .yloop:
(1)  230/    16F2 : 2944 0004           		move.l	d4,4(a4)
(1)  231/    16F6 : 3A10                		move.w	(a0),d5
(1)  232/    16F8 : BA7C FFFF           		cmp.w	#-1,d5
(1)  233/    16FC : 6606                		bne.s	.nonull
(1)  234/    16FE : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  235/    1702 : 6002                		bra.s	.cont
(1)  236/    1704 :                     .nonull:
(1)  237/    1704 : DA42                		add.w	d2,d5
(1)  238/    1706 :                     .cont:
(1)  239/    1706 : 4847                		swap	d7
(1)  240/    1708 : D0FC 0002           		adda	#2,a0
(1)  241/    170C : 0839 0002 FFFF A01C 		btst	#2,(RAM_VdpCache+$C).l
(1)  242/    1714 : 6712                		beq.s	.nodble
(1)  243/    1716 : D0FC 0002           		adda	#2,a0
(1)  244/    171A : 3E05                		move.w	d5,d7
(1)  245/    171C : E24F                		lsr.w	#1,d7
(1)  246/    171E : CE7C 07FF           		and.w	#$7FF,d7
(1)  247/    1722 : CA7C F800           		and.w	#$F800,d5
(1)  248/    1726 : 8A47                		or.w	d7,d5
(1)  249/    1728 :                     .nodble:
(1)  250/    1728 : 4847                		swap	d7
(1)  251/    172A : 3885                		move.w	d5,(a4)
(1)  252/    172C : D886                		add.l	d6,d4
(1)  253/    172E : 51CF FFC2           		dbf	d7,.yloop
(1)  254/    1732 :                     .outdbl:
(1)  255/    1732 : 281F                		move.l	(sp)+,d4
(1)  256/    1734 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  257/    173A : 4845                		swap	d5
(1)  258/    173C : 51CD FFA2           		dbf	d5,.xloop
(1)  259/    1740 : 4E75                		rts
(1)  260/    1742 :                     		
(1)  261/    1742 :                     ; --------------------------------------------------------
(1)  262/    1742 :                     ; Video_AutoMap_Vert
(1)  263/    1742 :                     ; 
(1)  264/    1742 :                     ; Make automatic map, Vertical order
(1)  265/    1742 :                     ; 
(1)  266/    1742 :                     ; MCD: Use this to make a virtual screen
(1)  267/    1742 :                     ; for Stamps
(1)  268/    1742 :                     ; 
(1)  269/    1742 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  270/    1742 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  271/    1742 :                     ; d2 | WORD - VRAM
(1)  272/    1742 :                     
(1)  273/    1742 :                     ; Uses:
(1)  274/    1742 :                     ; a4-a5,d4-d7
(1)  275/    1742 :                     ; --------------------------------------------------------
(1)  276/    1742 :                     
(1)  277/    1742 :                     ; TODO: support for double interlace
(1)  278/    1742 :                     
(1)  279/    1742 :                     Video_AutoMap_Vert:
(1)  280/    1742 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  281/    1748 : 6100 0182           		bsr	vid_PickLayer
(1)  282/    174C :                     		
(1)  283/    174C :                     	; Start here
(1)  284/    174C : 3E02                		move.w	d2,d7
(1)  285/    174E : 2A01                		move.l	d1,d5
(1)  286/    1750 : 4845                		swap	d5
(1)  287/    1752 :                     .xloop:
(1)  288/    1752 : 4845                		swap	d5
(1)  289/    1754 : 2F04                		move.l	d4,-(sp)
(1)  290/    1756 : 3A01                		move.w	d1,d5
(1)  291/    1758 : 0839 0002 FFFF A01C 		btst	#2,(RAM_VdpCache+$C).l
(1)  292/    1760 : 6702                		beq.s	.yloop
(1)  293/    1762 : E24D                		lsr.w	#1,d5
(1)  294/    1764 :                     .yloop:
(1)  295/    1764 : 2944 0004           		move.l	d4,4(a4)
(1)  296/    1768 : 3887                		move.w	d7,(a4)
(1)  297/    176A : DE7C 0001           		add.w	#1,d7
(1)  298/    176E : D886                		add.l	d6,d4
(1)  299/    1770 : 51CD FFF2           		dbf	d5,.yloop
(1)  300/    1774 :                     
(1)  301/    1774 : 281F                		move.l	(sp)+,d4
(1)  302/    1776 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  303/    177C : 4845                		swap	d5
(1)  304/    177E : 51CD FFD2           		dbf	d5,.xloop
(1)  305/    1782 : 4E75                		rts
(1)  306/    1784 :                     		
(1)  307/    1784 :                     ; --------------------------------------------------------
(1)  308/    1784 :                     ; Video_Print
(1)  309/    1784 :                     ; 
(1)  310/    1784 :                     ; Prints string to layer
(1)  311/    1784 :                     ; requires ASCII font
(1)  312/    1784 :                     ; 
(1)  313/    1784 :                     ; a0 - string data
(1)  314/    1784 :                     ; d0 | LONG - 00|Lyr|X|Y, locate(lyr,x,y)
(1)  315/    1784 :                     ; 
(1)  316/    1784 :                     ; Notes:
(1)  317/    1784 :                     ; "//b" - Show BYTE value
(1)  318/    1784 :                     ; "//w" - Show WORD value
(1)  319/    1784 :                     ; "//l" - Show LONG value
(1)  320/    1784 :                     ;   $0A - Next line
(1)  321/    1784 :                     ;   $00 - End of line
(1)  322/    1784 :                     ; 
(1)  323/    1784 :                     ; Uses:
(1)  324/    1784 :                     ; a4-a6,d4-d7
(1)  325/    1784 :                     ; --------------------------------------------------------
(1)  326/    1784 :                     
(1)  327/    1784 :                     Video_Print:
(1)  328/    1784 : 48E7 1F00           		movem.l	d3-d7,-(sp)
(1)  329/    1788 : 48E7 000E           		movem.l	a4-a6,-(sp)
(1)  330/    178C :                     		
(1)  331/    178C : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  332/    1792 : 6100 0138           		bsr	vid_PickLayer
(1)  333/    1796 : 4BF8 A028           		lea	(RAM_VidPrntList),a5
(1)  334/    179A :                     .newjump:
(1)  335/    179A : 2D44 0004           		move.l	d4,4(a6)
(1)  336/    179E : 2A04                		move.l	d4,d5
(1)  337/    17A0 :                     .loop:
(1)  338/    17A0 : 1E18                		move.b	(a0)+,d7
(1)  339/    17A2 : 6772                		beq	.exit
(1)  340/    17A4 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  341/    17A8 : 6718                		beq.s	.next
(1)  342/    17AA : 0C07 005C           		cmpi.b	#$5C,d7			; $57 ("\") special?
(1)  343/    17AE : 6716                		beq.s	.special
(1)  344/    17B0 : 0247 00FF           		andi.w	#$FF,d7
(1)  345/    17B4 :                     .puttext:
(1)  346/    17B4 : DE78 A088           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  347/    17B8 : 3C87                		move.w	d7,(a6)
(1)  348/    17BA : DABC 0002 0000      		add.l	#$20000,d5
(1)  349/    17C0 : 60DE                		bra.s	.loop
(1)  350/    17C2 :                     ; Next line
(1)  351/    17C2 :                     .next:
(1)  352/    17C2 : D886                		add.l	d6,d4
(1)  353/    17C4 : 60D4                		bra.s	.newjump
(1)  354/    17C6 :                     
(1)  355/    17C6 :                     ; Specials
(1)  356/    17C6 :                     .special:
(1)  357/    17C6 : 1E18                		move.b	(a0)+,d7
(1)  358/    17C8 : 0C07 0062           		cmpi.b	#"b",d7
(1)  359/    17CC : 6712                		beq.s	.isbyte
(1)  360/    17CE : 0C07 0077           		cmpi.b	#"w",d7
(1)  361/    17D2 : 671E                		beq.s	.isword
(1)  362/    17D4 : 0C07 006C           		cmpi.b	#"l",d7
(1)  363/    17D8 : 672A                		beq.s	.islong
(1)  364/    17DA : 3E3C 005C           		move.w	#"\\",d7			; nothing to do
(1)  365/    17DE : 60D4                		bra.s	.puttext
(1)  366/    17E0 :                     		
(1)  367/    17E0 :                     	; TEMPORAL VALUES
(1)  368/    17E0 :                     .isbyte:
(1)  369/    17E0 : 2AC5                		move.l	d5,(a5)+
(1)  370/    17E2 : 3AFC 0001           		move.w	#1,(a5)+
(1)  371/    17E6 : DABC 0004 0000      		add.l	#$40000,d5
(1)  372/    17EC : 2D45 0004           		move.l	d5,4(a6)
(1)  373/    17F0 : 60AE                		bra	.loop
(1)  374/    17F2 :                     .isword:
(1)  375/    17F2 : 2AC5                		move.l	d5,(a5)+
(1)  376/    17F4 : 3AFC 0002           		move.w	#2,(a5)+
(1)  377/    17F8 : DABC 0008 0000      		add.l	#$80000,d5
(1)  378/    17FE : 2D45 0004           		move.l	d5,4(a6)
(1)  379/    1802 : 609C                		bra	.loop
(1)  380/    1804 :                     .islong:
(1)  381/    1804 : 2AC5                		move.l	d5,(a5)+
(1)  382/    1806 : 3AFC 0003           		move.w	#3,(a5)+
(1)  383/    180A : DABC 0010 0000      		add.l	#$100000,d5
(1)  384/    1810 : 2D45 0004           		move.l	d5,4(a6)
(1)  385/    1814 : 608A                		bra	.loop
(1)  386/    1816 :                     .exit:
(1)  387/    1816 :                     
(1)  388/    1816 :                     ; --------------------------------------------------------
(1)  389/    1816 :                     ; Print values
(1)  390/    1816 :                     ; check MAX_PRNTLIST for maximum values
(1)  391/    1816 :                     ; 
(1)  392/    1816 :                     ; vvvv vvvv tttt
(1)  393/    1816 :                     ; v - vdp pos
(1)  394/    1816 :                     ; t - value type
(1)  395/    1816 :                     ; --------------------------------------------------------
(1)  396/    1816 :                     
(1)  397/    1816 : 7800                		moveq	#0,d4
(1)  398/    1818 : 7A00                		moveq	#0,d5
(1)  399/    181A : 7C00                		moveq	#0,d6
(1)  400/    181C : 4BF8 A028           		lea	(RAM_VidPrntList),a5
(1)  401/    1820 :                     .nextv:
(1)  402/    1820 : 4A95                		tst.l	(a5)
(1)  403/    1822 : 6700 009E           		beq	.nothing
(1)  404/    1826 :                     
(1)  405/    1826 :                     	; grab value
(1)  406/    1826 : 7800                		moveq	#0,d4
(1)  407/    1828 : 1818                		move.b	(a0)+,d4
(1)  408/    182A : E19C                		rol.l	#8,d4
(1)  409/    182C : 1818                		move.b	(a0)+,d4
(1)  410/    182E : E19C                		rol.l	#8,d4
(1)  411/    1830 : 1818                		move.b	(a0)+,d4
(1)  412/    1832 : E19C                		rol.l	#8,d4
(1)  413/    1834 : 1818                		move.b	(a0)+,d4
(1)  414/    1836 : 2844                		movea.l	d4,a4
(1)  415/    1838 : 7800                		moveq	#0,d4
(1)  416/    183A :                     
(1)  417/    183A :                     	; get value
(1)  418/    183A : 3C2D 0004           		move.w	4(a5),d6
(1)  419/    183E :                     		
(1)  420/    183E : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  421/    1842 : 660E                		bne.s	.vbyte
(1)  422/    1844 : 1814                		move.b	(a4),d4
(1)  423/    1846 : 2D55 0004           		move.l	(a5),4(a6)
(1)  424/    184A : E91C                		rol.b	#4,d4
(1)  425/    184C : 6158                		bsr.s	.donibl
(1)  426/    184E : E91C                		rol.b	#4,d4
(1)  427/    1850 : 6154                		bsr.s	.donibl
(1)  428/    1852 :                     .vbyte:
(1)  429/    1852 : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  430/    1856 : 661C                		bne.s	.vword
(1)  431/    1858 : 1814                		move.b	(a4),d4
(1)  432/    185A : E15C                		rol.w	#8,d4
(1)  433/    185C : 182C 0001           		move.b	1(a4),d4
(1)  434/    1860 : 2D55 0004           		move.l	(a5),4(a6)
(1)  435/    1864 : E95C                		rol.w	#4,d4
(1)  436/    1866 : 613E                		bsr.s	.donibl
(1)  437/    1868 : E95C                		rol.w	#4,d4
(1)  438/    186A : 613A                		bsr.s	.donibl
(1)  439/    186C : E95C                		rol.w	#4,d4
(1)  440/    186E : 6136                		bsr.s	.donibl
(1)  441/    1870 : E95C                		rol.w	#4,d4
(1)  442/    1872 : 6132                		bsr.s	.donibl
(1)  443/    1874 :                     .vword:
(1)  444/    1874 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  445/    1878 : 6624                		bne.s	.vlong
(1)  446/    187A : 1814                		move.b	(a4),d4
(1)  447/    187C : E19C                		rol.l	#8,d4
(1)  448/    187E : 182C 0001           		move.b	1(a4),d4
(1)  449/    1882 : E19C                		rol.l	#8,d4
(1)  450/    1884 : 182C 0002           		move.b	2(a4),d4
(1)  451/    1888 : E19C                		rol.l	#8,d4
(1)  452/    188A : 182C 0003           		move.b	3(a4),d4
(1)  453/    188E : 2D55 0004           		move.l	(a5),4(a6)
(1)  454/    1892 : 3C3C 0007           		move.w	#7,d6
(1)  455/    1896 : E99C                .lngloop:	rol.l	#4,d4
(1)  456/    1898 : 610C                		bsr.s	.donibl
(1)  457/    189A : 51CE FFFA           		dbf	d6,.lngloop
(1)  458/    189E :                     .vlong:
(1)  459/    189E : 429D                		clr.l	(a5)+
(1)  460/    18A0 : 425D                		clr.w	(a5)+
(1)  461/    18A2 : 6000 FF7C           		bra	.nextv
(1)  462/    18A6 :                     
(1)  463/    18A6 :                     ; make nibble byte
(1)  464/    18A6 :                     .donibl:
(1)  465/    18A6 : 3A04                		move.w	d4,d5
(1)  466/    18A8 : 0245 000F           		andi.w	#%1111,d5
(1)  467/    18AC : BA3C 000A           		cmp.b	#$A,d5
(1)  468/    18B0 : 6D04                		blt.s	.lowr
(1)  469/    18B2 : DA3C 0007           		add.b	#7,d5
(1)  470/    18B6 :                     .lowr:
(1)  471/    18B6 : DA7C 0030           		add.w	#"0",d5
(1)  472/    18BA : DA78 A088           		add.w	(RAM_VidPrntVram),d5
(1)  473/    18BE : 3C85                		move.w	d5,(a6)
(1)  474/    18C0 : 4E75                		rts
(1)  475/    18C2 :                     ; exit
(1)  476/    18C2 :                     .nothing:
(1)  477/    18C2 : 4CDF 7000           		movem.l	(sp)+,a4-a6
(1)  478/    18C6 : 4CDF 00F8           		movem.l	(sp)+,d3-d7
(1)  479/    18CA : 4E75                		rts
(1)  480/    18CC :                     
(1)  481/    18CC :                     ; --------------------------------------------------------
(1)  482/    18CC :                     ; Shared: pick layer / x pos / y pos and
(1)  483/    18CC :                     ; set next-line size
(1)  484/    18CC :                     ; --------------------------------------------------------
(1)  485/    18CC :                     
(1)  486/    18CC :                     vid_PickLayer:
(1)  487/    18CC :                     	; Pick layer
(1)  488/    18CC : 2C00                		move.l	d0,d6
(1)  489/    18CE : 4846                		swap	d6
(1)  490/    18D0 : 0806 0000           		btst	#0,d6
(1)  491/    18D4 : 671E                		beq.s	.plawnd
(1)  492/    18D6 : 1839 FFFF A014      		move.b	(RAM_VdpCache+4).l,d4	; BG
(1)  493/    18DC : 3A04                		move.w	d4,d5
(1)  494/    18DE : E24D                		lsr.w	#1,d5
(1)  495/    18E0 : 0245 0003           		andi.w	#%11,d5
(1)  496/    18E4 : 4844                		swap	d4
(1)  497/    18E6 : 3805                		move.w	d5,d4
(1)  498/    18E8 : 4844                		swap	d4
(1)  499/    18EA : 0244 0001           		andi.w	#1,d4
(1)  500/    18EE : E14C                		lsl.w	#8,d4
(1)  501/    18F0 : EB4C                		lsl.w	#5,d4
(1)  502/    18F2 : 6028                		bra.s	.golyr
(1)  503/    18F4 :                     .plawnd:
(1)  504/    18F4 : 1839 FFFF A012      		move.b	(RAM_VdpCache+2).l,d4	; FG
(1)  505/    18FA : 0806 0001           		btst	#1,d6
(1)  506/    18FE : 6706                		beq.s	.nowd
(1)  507/    1900 : 1839 FFFF A013      		move.b	(RAM_VdpCache+3).l,d4	; WINDOW
(1)  508/    1906 :                     .nowd:		
(1)  509/    1906 : 3A04                		move.w	d4,d5
(1)  510/    1908 : E84D                		lsr.w	#4,d5
(1)  511/    190A : 0245 0003           		andi.w	#%11,d5
(1)  512/    190E : 4844                		swap	d4
(1)  513/    1910 : 3805                		move.w	d5,d4
(1)  514/    1912 : 4844                		swap	d4
(1)  515/    1914 : 0244 000E           		andi.w	#%00001110,d4
(1)  516/    1918 : E14C                		lsl.w	#8,d4
(1)  517/    191A : E54C                		lsl.w	#2,d4
(1)  518/    191C :                     .golyr:
(1)  519/    191C : 0044 4000           		ori.w	#$4000,d4
(1)  520/    1920 : 3A00                		move.w	d0,d5			; Y start pos
(1)  521/    1922 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  522/    1926 : ED4D                		lsl.w	#6,d5			
(1)  523/    1928 : 1C38 A020           		move.b	(RAM_VdpCache+$10).w,d6
(1)  524/    192C : 0246 0003           		andi.w	#%11,d6
(1)  525/    1930 : 670A                		beq.s	.thissz
(1)  526/    1932 : DA45                		add.w	d5,d5			; H64
(1)  527/    1934 : 0246 0002           		andi.w	#%10,d6
(1)  528/    1938 : 6702                		beq.s	.thissz
(1)  529/    193A : DA45                		add.w	d5,d5			; H128		
(1)  530/    193C :                     .thissz:
(1)  531/    193C : D845                		add.w	d5,d4
(1)  532/    193E : 3A00                		move.w	d0,d5
(1)  533/    1940 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  534/    1944 : EE4D                		lsr.w	#7,d5
(1)  535/    1946 : D845                		add.w	d5,d4			; X add
(1)  536/    1948 : 4844                		swap	d4
(1)  537/    194A : 7C00                		moveq	#0,d6
(1)  538/    194C : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  539/    1950 : 1A38 A020           		move.b	(RAM_VdpCache+$10).w,d5
(1)  540/    1954 : 0245 0003           		andi.w	#%11,d5
(1)  541/    1958 : 670A                		beq.s	.thisszj
(1)  542/    195A : DC46                		add.w	d6,d6			; H64
(1)  543/    195C : 0245 0002           		andi.w	#%10,d5
(1)  544/    1960 : 6702                		beq.s	.thisszj
(1)  545/    1962 : DC46                		add.w	d6,d6			; H128		
(1)  546/    1964 :                     .thisszj:
(1)  547/    1964 : 4846                		swap	d6
(1)  548/    1966 : 4E75                		rts
(1)  549/    1968 :                     
(1)  550/    1968 :                     ; --------------------------------------------------------
(1)  551/    1968 :                     ; Shared: set layer size
(1)  552/    1968 :                     ; --------------------------------------------------------
(1)  553/    1968 :                     
(1)  554/    1968 :                     vid_PickSize:
(1)  555/    1968 : 1839 FFFF A020      		move.b	(RAM_VdpCache+$10).l,d4
(1)  556/    196E : 3A04                		move.w	d4,d5
(1)  557/    1970 : C87C 0003           		and.w	#%000011,d4
(1)  558/    1974 : CA7C 0030           		and.w	#%110000,d5
(1)  559/    1978 : E44D                		lsr.w	#2,d5
(1)  560/    197A : 8845                		or.w	d5,d4
(1)  561/    197C : D844                		add.w	d4,d4
(1)  562/    197E : 383B 4004           		move.w	.sizelist(pc,d4.w),d4
(1)  563/    1982 : 4E75                		rts
(1)  564/    1984 :                     
(1)  565/    1984 : 07FF                .sizelist:	dc.w $7FF 	;  V32  H32
(1)  566/    1986 : 0FFF                		dc.w $FFF	;  V32  H64
(1)  567/    1988 : 0FFF                		dc.w $FFF	;  V32 ----
(1)  568/    198A : 1FFF                		dc.w $1FFF	;  V32 H128
(1)  569/    198C : 0FFF                		dc.w $FFF 	;  V64  H32
(1)  570/    198E : 1FFF                		dc.w $1FFF	;  V64  H64
(1)  571/    1990 : 1FFF                		dc.w $1FFF	;  V64 ----
(1)  572/    1992 : 3FFF                		dc.w $3FFF	;  V64 H128
(1)  573/    1994 : 07FF                		dc.w $7FF 	; ----  H32
(1)  574/    1996 : 0FFF                		dc.w $FFF	; ----  H64
(1)  575/    1998 : 0FFF                		dc.w $FFF	; ---- ----
(1)  576/    199A : 1FFF                		dc.w $1FFF	; ---- H128
(1)  577/    199C : 1FFF                		dc.w $1FFF 	; V128  H32
(1)  578/    199E : 3FFF                		dc.w $3FFF	; V128  H64
(1)  579/    19A0 : 3FFF                		dc.w $3FFF	; V128 ----
(1)  580/    19A2 : 7FFF                		dc.w $7FFF	; V128 H128
(1)  581/    19A4 :                     		align 2
(1)  582/    19A4 :                     		
(1)  583/    19A4 :                     ; ====================================================================
(1)  584/    19A4 :                     ; --------------------------------------------------------
(1)  585/    19A4 :                     ; DMA VDP Fill and VDP Copy
(1)  586/    19A4 :                     ; --------------------------------------------------------
(1)  587/    19A4 :                     
(1)  588/    19A4 :                     ; --------------------------------------------------------
(1)  589/    19A4 :                     ; Video_Fill
(1)  590/    19A4 :                     ; 
(1)  591/    19A4 :                     ; Fill data to VRAM
(1)  592/    19A4 :                     ;
(1)  593/    19A4 :                     ; d0 | WORD - Fill data
(1)  594/    19A4 :                     ; d1 | WORD - Size
(1)  595/    19A4 :                     ; d2 | WORD - VRAM
(1)  596/    19A4 :                     ; --------------------------------------------------------
(1)  597/    19A4 :                     
(1)  598/    19A4 :                     Video_Fill:
(1)  599/    19A4 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  600/    19AA :                     		
(1)  601/    19AA : 383C 8100           		move.w	#$8100,d4
(1)  602/    19AE : 1838 A011           		move.b	(RAM_VdpCache+1),d4
(1)  603/    19B2 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  604/    19B6 : 3884                		move.w	d4,(a4)
(1)  605/    19B8 : 3814                .dmaw:		move.w	(a4),d4
(1)  606/    19BA : 0804 0001           		btst	#bitDma,d4
(1)  607/    19BE : 66F8                		bne.s	.dmaw
(1)  608/    19C0 : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  609/    19C4 :                     
(1)  610/    19C4 :                     	; SIZE
(1)  611/    19C4 : 3801                		move.w	d1,d4
(1)  612/    19C6 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  613/    19CC : E24C                		lsr.w	#1,d4
(1)  614/    19CE : 1A04                		move.b	d4,d5
(1)  615/    19D0 : 4845                		swap	d5
(1)  616/    19D2 : E04C                		lsr.w	#8,d4
(1)  617/    19D4 : 1A04                		move.b	d4,d5
(1)  618/    19D6 : 4845                		swap	d5
(1)  619/    19D8 : 2885                		move.l	d5,(a4)
(1)  620/    19DA : 38BC 9780           		move.w	#$9780,(a4)		; DMA Fill bit
(1)  621/    19DE :                     
(1)  622/    19DE :                     	; DESTINATION
(1)  623/    19DE : 2802                		move.l	d2,d4
(1)  624/    19E0 :                     ; 		lsl.w	#5,d4
(1)  625/    19E0 : 3A04                		move.w	d4,d5
(1)  626/    19E2 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  627/    19E6 : 0045 4000           		ori.w	#$4000,d5
(1)  628/    19EA : 4845                		swap	d5
(1)  629/    19EC : 3A04                		move.w	d4,d5
(1)  630/    19EE : E04D                		lsr.w	#8,d5
(1)  631/    19F0 : EC4D                		lsr.w	#6,d5
(1)  632/    19F2 : 0245 0003           		andi.w	#%11,d5
(1)  633/    19F6 : 0045 0080           		ori.w	#$80,d5
(1)  634/    19FA : 2885                		move.l	d5,(a4)
(1)  635/    19FC : 3940 FFFC           		move.w	d0,-4(a4)
(1)  636/    1A00 : 3814                .dmawe:		move.w	(a4),d4
(1)  637/    1A02 : 0804 0001           		btst	#bitDma,d4
(1)  638/    1A06 : 66F8                		bne.s	.dmawe
(1)  639/    1A08 :                     
(1)  640/    1A08 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  641/    1A0C : 383C 8100           		move.w	#$8100,d4
(1)  642/    1A10 : 1838 A011           		move.b	(RAM_VdpCache+1),d4
(1)  643/    1A14 : 3884                		move.w	d4,(a4)
(1)  644/    1A16 : 4E75                		rts
(1)  645/    1A18 :                     
(1)  646/    1A18 :                     ; --------------------------------------------------------
(1)  647/    1A18 :                     ; Video_Copy
(1)  648/    1A18 :                     ; 
(1)  649/    1A18 :                     ; Copy VRAM data to another location
(1)  650/    1A18 :                     ;
(1)  651/    1A18 :                     ; d0 | WORD - VRAM Source
(1)  652/    1A18 :                     ; d1 | WORD - Size
(1)  653/    1A18 :                     ; d2 | WORD - VRAM Destination
(1)  654/    1A18 :                     ; --------------------------------------------------------
(1)  655/    1A18 :                     
(1)  656/    1A18 :                     Video_Copy:
(1)  657/    1A18 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  658/    1A1E :                     		
(1)  659/    1A1E : 383C 8100           		move.w	#$8100,d4
(1)  660/    1A22 : 1838 A011           		move.b	(RAM_VdpCache+1),d4
(1)  661/    1A26 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  662/    1A2A : 3884                		move.w	d4,(a4)
(1)  663/    1A2C : 3814                .dmaw:		move.w	(a4),d4
(1)  664/    1A2E : 0804 0001           		btst	#bitDma,d4
(1)  665/    1A32 : 66F8                		bne.s	.dmaw
(1)  666/    1A34 : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  667/    1A38 :                     
(1)  668/    1A38 :                     	; SIZE
(1)  669/    1A38 : 3801                		move.w	d1,d4
(1)  670/    1A3A : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  671/    1A40 : E24C                		lsr.w	#1,d4
(1)  672/    1A42 : 1A04                		move.b	d4,d5
(1)  673/    1A44 : 4845                		swap	d5
(1)  674/    1A46 : E04C                		lsr.w	#8,d4
(1)  675/    1A48 : 1A04                		move.b	d4,d5
(1)  676/    1A4A : 4845                		swap	d5
(1)  677/    1A4C : 2885                		move.l	d5,(a4)
(1)  678/    1A4E :                     	
(1)  679/    1A4E :                     	; SOURCE
(1)  680/    1A4E : 2A3C 9600 9500      		move.l	#$96009500,d5
(1)  681/    1A54 : 3800                		move.w	d0,d4
(1)  682/    1A56 : 1A04                		move.b	d4,d5
(1)  683/    1A58 : 4845                		swap	d5
(1)  684/    1A5A : E04C                		lsr.w	#8,d4
(1)  685/    1A5C : 1A04                		move.b	d4,d5
(1)  686/    1A5E : 2885                		move.l	d5,(a4)
(1)  687/    1A60 : 38BC 97C0           		move.w	#$97C0,(a4)		; DMA Fill bit
(1)  688/    1A64 :                     		
(1)  689/    1A64 :                     	; DESTINATION
(1)  690/    1A64 : 2802                		move.l	d2,d4
(1)  691/    1A66 :                     ; 		lsl.w	#5,d4
(1)  692/    1A66 : 3A04                		move.w	d4,d5
(1)  693/    1A68 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  694/    1A6C : 0045 4000           		ori.w	#$4000,d5
(1)  695/    1A70 : 4845                		swap	d5
(1)  696/    1A72 : 3A04                		move.w	d4,d5
(1)  697/    1A74 : E04D                		lsr.w	#8,d5
(1)  698/    1A76 : EC4D                		lsr.w	#6,d5
(1)  699/    1A78 : 0245 0003           		andi.w	#%11,d5
(1)  700/    1A7C : 0045 00C0           		ori.w	#$C0,d5
(1)  701/    1A80 : 2885                		move.l	d5,(a4)
(1)  702/    1A82 : 3940 FFFC           		move.w	d0,-4(a4)
(1)  703/    1A86 : 3814                .dmawe:		move.w	(a4),d4
(1)  704/    1A88 : 0804 0001           		btst	#bitDma,d4
(1)  705/    1A8C : 66F8                		bne.s	.dmawe
(1)  706/    1A8E :                     
(1)  707/    1A8E : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  708/    1A92 : 383C 8100           		move.w	#$8100,d4
(1)  709/    1A96 : 1838 A011           		move.b	(RAM_VdpCache+1),d4
(1)  710/    1A9A : 3884                		move.w	d4,(a4)
(1)  711/    1A9C : 4E75                		rts
(1)  712/    1A9E :                     
(1)  713/    1A9E :                     ; ====================================================================
(1)  714/    1A9E :                     ; --------------------------------------------------------
(1)  715/    1A9E :                     ; DMA ROM to VDP Transfers
(1)  716/    1A9E :                     ; 
(1)  717/    1A9E :                     ; If porting to 32X: you need to transfer these
(1)  718/    1A9E :                     ; routines to RAM
(1)  719/    1A9E :                     ; --------------------------------------------------------
(1)  720/    1A9E :                     		
(1)  721/    1A9E :                     ; --------------------------------------------------------
(1)  722/    1A9E :                     ; Video_LoadArt
(1)  723/    1A9E :                     ; 
(1)  724/    1A9E :                     ; Load art using DMA
(1)  725/    1A9E :                     ;
(1)  726/    1A9E :                     ; d0 | LONG - Art data
(1)  727/    1A9E :                     ; d1 | WORD - Size
(1)  728/    1A9E :                     ; d2 | WORD - VRAM (cell)
(1)  729/    1A9E :                     ; 
(1)  730/    1A9E :                     ; Uses:
(1)  731/    1A9E :                     ; d4-d5,a4
(1)  732/    1A9E :                     ; 
(1)  733/    1A9E :                     ; *HARDWARE NOTES*
(1)  734/    1A9E :                     ; MCD: WORDRAM source data must be incremented by 2 bytes,
(1)  735/    1A9E :                     ;      also the first WORD write might get lost
(1)  736/    1A9E :                     ; 
(1)  737/    1A9E :                     ; 32X: The routine must be at RAM since we need
(1)  738/    1A9E :                     ;      to set RV=1 so DMA can read from MD's
(1)  739/    1A9E :                     ;      original ROM Map, also locks access to ROM on
(1)  740/    1A9E :                     ;      the SH2 Side
(1)  741/    1A9E :                     ; --------------------------------------------------------
(1)  742/    1A9E :                     
(1)  743/    1A9E :                     Video_LoadArt:
(1)  744/    1A9E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  745/    1AA4 : 383C 8100           		move.w	#$8100,d4
(1)  746/    1AA8 : 1838 A011           		move.b	(RAM_VdpCache+1),d4
(1)  747/    1AAC : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  748/    1AB0 : 3884                		move.w	d4,(a4)			; Turn ON DMA
(1)  749/    1AB2 :                     
(1)  750/    1AB2 :                     	; SIZE
(1)  751/    1AB2 : 3801                		move.w	d1,d4
(1)  752/    1AB4 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  753/    1ABA : E24C                		lsr.w	#1,d4
(1)  754/    1ABC : 1A04                		move.b	d4,d5
(1)  755/    1ABE : 4845                		swap	d5
(1)  756/    1AC0 : E04C                		lsr.w	#8,d4
(1)  757/    1AC2 : 1A04                		move.b	d4,d5
(1)  758/    1AC4 : 4845                		swap	d5
(1)  759/    1AC6 : 2885                		move.l	d5,(a4)
(1)  760/    1AC8 :                     
(1)  761/    1AC8 :                     	; SOURCE
(1)  762/    1AC8 : 2800                		move.l	d0,d4
(1)  763/    1ACA : E28C                  		lsr.l	#1,d4
(1)  764/    1ACC : 2A3C 9600 9500       		move.l	#$96009500,d5
(1)  765/    1AD2 : 1A04                 		move.b	d4,d5
(1)  766/    1AD4 : E08C                 		lsr.l	#8,d4
(1)  767/    1AD6 : 4845                 		swap	d5
(1)  768/    1AD8 : 1A04                 		move.b	d4,d5
(1)  769/    1ADA : 2885                 		move.l	d5,(a4)
(1)  770/    1ADC : 3A3C 9700            		move.w	#$9700,d5
(1)  771/    1AE0 : E08C                 		lsr.l	#8,d4
(1)  772/    1AE2 : 1A04                 		move.b	d4,d5
(1)  773/    1AE4 : 3885                 		move.w	d5,(a4)
(1)  774/    1AE6 :                      		
(1)  775/    1AE6 :                     	; DESTINATION
(1)  776/    1AE6 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80 request
(1)  777/    1AEE : 3802                		move.w	d2,d4
(1)  778/    1AF0 : C87C 07FF           		and.w	#$7FF,d4
(1)  779/    1AF4 : EB4C                		lsl.w	#5,d4
(1)  780/    1AF6 : 3A04                		move.w	d4,d5
(1)  781/    1AF8 : C8BC 0000 3FE0      		and.l	#$3FE0,d4
(1)  782/    1AFE : 0044 4000           		ori.w	#$4000,d4
(1)  783/    1B02 : 3884                		move.w	d4,(a4)			; First write
(1)  784/    1B04 : E04D                		lsr.w	#8,d5
(1)  785/    1B06 : EC4D                		lsr.w	#6,d5
(1)  786/    1B08 : 0245 0003           		andi.w	#%11,d5
(1)  787/    1B0C : 0045 0080           		ori.w	#$80,d5
(1)  788/    1B10 :                     .wait:
(1)  789/    1B10 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for Z80
(1)  790/    1B18 : 66F6                		bne.s	.wait
(1)  791/    1B1A : 3F05                 		move.w	d5,-(sp)		; Second write must be from RAM
(1)  792/    1B1C : 389F                		move.w	(sp)+,(a4)
(1)  793/    1B1E : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Start Z80
(1)  794/    1B26 :                     	
(1)  795/    1B26 : 383C 8100           		move.w	#$8100,d4		; Turn OFF DMA
(1)  796/    1B2A : 1838 A011           		move.b	(RAM_VdpCache+1),d4
(1)  797/    1B2E : 3884                		move.w	d4,(a4)
(1)  798/    1B30 : 4E75                		rts
(1)  799/    1B32 :                     
(1)  800/    1B32 :                     ; ====================================================================
(1)  801/    1B32 :                     ; --------------------------------------------------------
(1)  802/    1B32 :                     ; Video data
(1)  803/    1B32 :                     ; --------------------------------------------------------
(1)  804/    1B32 :                     
(1)  805/    1B32 :                     list_vdpregs:
(1)  806/    1B32 : 04                  		dc.b $04			; HBlank int off, HV Counter on
(1)  807/    1B33 : 44                  		dc.b $44			; Display ON, VBlank int off
(1)  808/    1B34 : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(1)  809/    1B35 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  810/    1B36 : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(1)  811/    1B37 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  812/    1B38 : 00                  		dc.b $00			; Nothing
(1)  813/    1B39 : 00                  		dc.b $00			; Background color: 0
(1)  814/    1B3A : 00                  		dc.b $00			; Nothing
(1)  815/    1B3B : 00                  		dc.b $00			; Nothing
(1)  816/    1B3C : 00                  		dc.b $00			; HInt value
(1)  817/    1B3D : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  818/    1B3E : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  819/    1B3F : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  820/    1B40 : 00                  		dc.b $00			; Nothing
(1)  821/    1B41 : 02                  		dc.b $02			; VDP Auto increment by $02
(1)  822/    1B42 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  823/    1B43 : 00                  		dc.b $00			; Window layer Top/Bottom disabled
(1)  824/    1B44 : 00                  		dc.b $00			; Window layer Left/Right disabled
(1)  825/    1B45 :                     		align 2				; Align by 2
(1)  826/    1B46 :                     
(1)  827/    1B46 :                     Art_PrintFont:	binclude "system/md/data/art_prntfont.bin"
(1)  828/    2746 :                     Art_PrintFont_e:
(1)  829/    2746 :                     		align 2
(1)  830/    2746 :                     
(1)  831/    2746 :                     Pal_PrintFont:	binclude "system/md/data/pal_prntfont.bin"
(1)  832/    2752 :                     		align 2	
(1)  833/    2752 :                     
      40/    2752 :                     		include "system/md/system.asm"		; System
(1)    1/    2752 :                     ; ====================================================================
(1)    2/    2752 :                     ; ----------------------------------------------------------------
(1)    3/    2752 :                     ; System
(1)    4/    2752 :                     ; ----------------------------------------------------------------
(1)    5/    2752 :                     
(1)    6/    2752 :                     ; ASSEMBLER FLAGS USED:
(1)    7/    2752 :                     ; MCD  - Mega CD
(1)    8/    2752 :                     ; MARS - 32X
(1)    9/    2752 :                     
(1)   10/    2752 :                     ; --------------------------------------------------------
(1)   11/    2752 :                     ; Init System
(1)   12/    2752 :                     ; 
(1)   13/    2752 :                     ; Uses:
(1)   14/    2752 :                     ; a0-a2,d0-d1
(1)   15/    2752 :                     ; --------------------------------------------------------
(1)   16/    2752 :                     
(1)   17/    2752 :                     System_Init:
(1)   18/    2752 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; $0100 - Stop Z80
(1)   19/    275A :                     .wait:
(1)   20/    275A : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Z80 stopped?
(1)   21/    2762 : 66F6                		bne.s	.wait			; If not, wait
(1)   22/    2764 : 7040                		moveq	#%01000000,d0		; d0 = (TH=1), Init input ports
(1)   23/    2766 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Port 1 = d0
(1)   24/    276C : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Port 2 = d0
(1)   25/    2772 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem  = d0
(1)   26/    2778 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; $0000 - Start Z80
(1)   27/    2780 : 4E75                		rts
(1)   28/    2782 :                     		
(1)   29/    2782 :                     ; ====================================================================
(1)   30/    2782 :                     ; ----------------------------------------------------------------
(1)   31/    2782 :                     ; System subroutines
(1)   32/    2782 :                     ; ----------------------------------------------------------------
(1)   33/    2782 :                     
(1)   34/    2782 :                     ; --------------------------------------------------------
(1)   35/    2782 :                     ; System_VSync
(1)   36/    2782 :                     ; 
(1)   37/    2782 :                     ; Waits for VBlank
(1)   38/    2782 :                     ; 
(1)   39/    2782 :                     ; Uses:
(1)   40/    2782 :                     ; d4
(1)   41/    2782 :                     ; --------------------------------------------------------
(1)   42/    2782 :                     
(1)   43/    2782 :                     System_VSync:
(1)   44/    2782 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4			; Read VDP Control to d4
(1)   45/    2788 : 0804 0003           		btst	#bitVBlnk,d4			; Test VBlank bit
(1)   46/    278C : 67F4                		beq.s	System_VSync			; If FALSE (not inside VBlank), try again
(1)   47/    278E : 610E                		bsr.s	System_Input			; Read user input data
(1)   48/    2790 : 3839 00C0 0004      .wait:		move.w	(vdp_ctrl),d4			; d4 - Read VDP Control
(1)   49/    2796 : 0804 0003           		btst	#bitVBlnk,d4			; Test VBlank bit
(1)   50/    279A : 66F4                		bne.s	.wait				; If TRUE (inside VBlank), wait for exit
(1)   51/    279C : 4E75                		rts
(1)   52/    279E :                     		
(1)   53/    279E :                     ; --------------------------------------------------------
(1)   54/    279E :                     ; System_Input
(1)   55/    279E :                     ; 
(1)   56/    279E :                     ; WARNING: Don't call this outside of VBLANK
(1)   57/    279E :                     ; (call System_VSync first)
(1)   58/    279E :                     ; 
(1)   59/    279E :                     ; Uses:
(1)   60/    279E :                     ; d4-d6,a4-a5
(1)   61/    279E :                     ; --------------------------------------------------------
(1)   62/    279E :                     
(1)   63/    279E :                     System_Input:
(1)   64/    279E :                     ; 		move.w	#$0100,(z80_bus).l	; $0100 - Stop Z80
(1)   65/    279E :                     ; .wait:
(1)   66/    279E :                     ; 		btst	#0,(z80_bus).l		; Z80 stopped?
(1)   67/    279E :                     ; 		bne.s	.wait			; If not, wait
(1)   68/    279E : 49F9 00A1 0003      		lea	(sys_data_1),a4		; a4 - Port 1 input data from system
(1)   69/    27A4 : 4BF8 A004           		lea	(RAM_InputData),a5	; a5 - Output data for reading
(1)   70/    27A8 : 610C                		bsr	.this_one		; read this input
(1)   71/    27AA : D8FC 0002           		adda	#2,a4			; next port [$A10005]
(1)   72/    27AE : DAFC 0006           		adda	#sizeof_input,a5	; next output slot
(1)   73/    27B2 : 6102                		bsr.s	.this_one		; read this input
(1)   74/    27B4 :                     ; 		move.w	#0,(z80_bus).l		; $0000 - Start Z80
(1)   75/    27B4 : 4E75                		rts
(1)   76/    27B6 :                     
(1)   77/    27B6 :                     ; --------------------------------------------------------	
(1)   78/    27B6 :                     ; do port
(1)   79/    27B6 :                     ; 
(1)   80/    27B6 :                     ; a4 - Current port
(1)   81/    27B6 :                     ; a5 - Output data
(1)   82/    27B6 :                     ; --------------------------------------------------------
(1)   83/    27B6 :                     
(1)   84/    27B6 :                     .this_one:
(1)   85/    27B6 : 6100 00D4           		bsr	.find_id			; Grab ID, returns at d4
(1)   86/    27BA : 1A84                		move.b	d4,pad_id(a5)			; Save ID to output
(1)   87/    27BC : B87C 000F           		cmp.w	#$F,d4				; Disconnected?
(1)   88/    27C0 : 670E                		beq.s	.exit				; If yes, exit this
(1)   89/    27C2 : C87C 000F           		and.w	#$F,d4				; Clear other bits, keep right 4 bits
(1)   90/    27C6 : D844                		add.w	d4,d4				; multiply by 2 for this list
(1)   91/    27C8 : 3A3B 400C           		move.w	.list(pc,d4.w),d5		; d5 = list+(inputid*2)
(1)   92/    27CC : 4EFB 5008           		jmp	.list(pc,d5.w)			; jump to list+jumpresult
(1)   93/    27D0 :                     
(1)   94/    27D0 :                     ; ------------------------------------------------
(1)   95/    27D0 :                     
(1)   96/    27D0 :                     .exit:
(1)   97/    27D0 : 422D 0001           		clr.b	pad_ver(a5)			; Clear output pad version
(1)   98/    27D4 : 4E75                		rts
(1)   99/    27D6 :                     
(1)  100/    27D6 :                     ; --------------------------------------------------------
(1)  101/    27D6 :                     ; Grab ID
(1)  102/    27D6 :                     ; --------------------------------------------------------
(1)  103/    27D6 :                     
(1)  104/    27D6 : FFFA                .list:		dc.w .exit-.list	; $00
(1)  105/    27D8 : FFFA                		dc.w .exit-.list
(1)  106/    27DA : FFFA                		dc.w .exit-.list
(1)  107/    27DC : FFFA                		dc.w .exit-.list
(1)  108/    27DE : FFFA                		dc.w .exit-.list	; $04
(1)  109/    27E0 : FFFA                		dc.w .exit-.list
(1)  110/    27E2 : FFFA                		dc.w .exit-.list
(1)  111/    27E4 : FFFA                		dc.w .exit-.list
(1)  112/    27E6 : FFFA                		dc.w .exit-.list	; $08
(1)  113/    27E8 : FFFA                		dc.w .exit-.list
(1)  114/    27EA : FFFA                		dc.w .exit-.list
(1)  115/    27EC : FFFA                		dc.w .exit-.list
(1)  116/    27EE : FFFA                		dc.w .exit-.list	; $0C
(1)  117/    27F0 : 0020                		dc.w .id_0D-.list
(1)  118/    27F2 : FFFA                		dc.w .exit-.list
(1)  119/    27F4 : FFFA                		dc.w .exit-.list
(1)  120/    27F6 :                     
(1)  121/    27F6 :                     ; --------------------------------------------------------
(1)  122/    27F6 :                     ; ID $0D
(1)  123/    27F6 :                     ; 
(1)  124/    27F6 :                     ; Normal controller, Old or New
(1)  125/    27F6 :                     ; --------------------------------------------------------
(1)  126/    27F6 :                     
(1)  127/    27F6 :                     .id_0D:
(1)  128/    27F6 : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  129/    27FA : 4E71                		nop
(1)  130/    27FC : 4E71                		nop
(1)  131/    27FE : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  132/    2802 : 4E71                		nop
(1)  133/    2804 : 4E71                		nop
(1)  134/    2806 : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  135/    280A : 4E71                		nop
(1)  136/    280C : 4E71                		nop
(1)  137/    280E : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  138/    2812 : 4E71                		nop
(1)  139/    2814 : 4E71                		nop
(1)  140/    2816 : 18BC 0040           		move.b	#$40,(a4)	; 6 button responds
(1)  141/    281A : 4E71                		nop
(1)  142/    281C : 4E71                		nop
(1)  143/    281E : 1814                		move.b	(a4),d4		; Grab ??|MXYZ
(1)  144/    2820 : 18BC 0000            		move.b	#$00,(a4)
(1)  145/    2824 : 4E71                  		nop
(1)  146/    2826 : 4E71                  		nop
(1)  147/    2828 : 1C14                 		move.b	(a4),d6		; Type: $03 old, $0F new
(1)  148/    282A : 18BC 0040            		move.b	#$40,(a4)
(1)  149/    282E : 4E71                 		nop
(1)  150/    2830 : 4E71                 		nop
(1)  151/    2832 : CC7C 000F           		and.w	#$F,d6
(1)  152/    2836 : E44E                		lsr.w	#2,d6
(1)  153/    2838 : CC7C 0001           		and.w	#1,d6
(1)  154/    283C : 6716                		beq.s	.oldpad
(1)  155/    283E : 4604                		not.b	d4
(1)  156/    2840 : C87C 000F            		and.w	#%1111,d4
(1)  157/    2844 : 1A2D 0002           		move.b	on_hold(a5),d5
(1)  158/    2848 : B905                		eor.b	d4,d5
(1)  159/    284A : 1B44 0002           		move.b	d4,on_hold(a5)
(1)  160/    284E : CA04                		and.b	d4,d5
(1)  161/    2850 : 1B45 0004           		move.b	d5,on_press(a5)
(1)  162/    2854 :                     .oldpad:
(1)  163/    2854 : 1B46 0001           		move.b	d6,pad_ver(a5)
(1)  164/    2858 :                     		
(1)  165/    2858 : 18BC 0000           		move.b	#$00,(a4)	; Show SA??|RLDU
(1)  166/    285C : 4E71                		nop
(1)  167/    285E : 4E71                		nop
(1)  168/    2860 : 1814                		move.b	(a4),d4
(1)  169/    2862 : E50C                		lsl.b	#2,d4
(1)  170/    2864 : C83C 00C0           		and.b	#%11000000,d4
(1)  171/    2868 : 18BC 0040           		move.b	#$40,(a4)	; Show ??CB|RLDU
(1)  172/    286C : 4E71                		nop
(1)  173/    286E : 4E71                		nop
(1)  174/    2870 : 1A14                		move.b	(a4),d5
(1)  175/    2872 : CA3C 003F           		and.b	#%00111111,d5
(1)  176/    2876 : 8805                		or.b	d5,d4
(1)  177/    2878 : 4604                		not.b	d4
(1)  178/    287A : 1A2D 0003           		move.b	on_hold+1(a5),d5
(1)  179/    287E : B905                		eor.b	d4,d5
(1)  180/    2880 : 1B44 0003           		move.b	d4,on_hold+1(a5)
(1)  181/    2884 : CA04                		and.b	d4,d5
(1)  182/    2886 : 1B45 0005           		move.b	d5,on_press+1(a5)
(1)  183/    288A : 4E75                		rts
(1)  184/    288C :                     		
(1)  185/    288C :                     ; --------------------------------------------------------
(1)  186/    288C :                     ; Grab ID
(1)  187/    288C :                     ; --------------------------------------------------------
(1)  188/    288C :                     
(1)  189/    288C :                     .find_id:
(1)  190/    288C : 7800                		moveq	#0,d4
(1)  191/    288E : 18BC 0070           		move.b	#%01110000,(a4)	; TH=1,TR=1,TL=1
(1)  192/    2892 : 4E71                		nop
(1)  193/    2894 : 4E71                		nop
(1)  194/    2896 : 610A                		bsr.s	.get_id
(1)  195/    2898 : 18BC 0030           		move.b	#%00110000,(a4)	; TH=0,TR=1,TL=1
(1)  196/    289C : 4E71                		nop
(1)  197/    289E : 4E71                		nop
(1)  198/    28A0 : D844                		add.w	d4,d4
(1)  199/    28A2 :                     .get_id:
(1)  200/    28A2 : 1A14                		move.b	(a4),d5
(1)  201/    28A4 : 1C05                		move.b	d5,d6
(1)  202/    28A6 : CC3C 000C           		and.b	#$C,d6
(1)  203/    28AA : 6702                		beq.s	.step_1
(1)  204/    28AC : 5244                		addq.w	#1,d4
(1)  205/    28AE :                     .step_1:
(1)  206/    28AE : D844                		add.w	d4,d4
(1)  207/    28B0 : 1C05                		move.b	d5,d6
(1)  208/    28B2 : CC7C 0003           		and.w	#3,d6
(1)  209/    28B6 : 6702                		beq.s	.step_2
(1)  210/    28B8 : 5244                		addq.w	#1,d4
(1)  211/    28BA :                     .step_2:
(1)  212/    28BA : 4E75                		rts
(1)  213/    28BC :                     	
(1)  214/    28BC :                     ; ====================================================================
(1)  215/    28BC :                     ; ----------------------------------------------------------------
(1)  216/    28BC :                     ; System data
(1)  217/    28BC :                     ; ----------------------------------------------------------------
(1)  218/    28BC :                     
      41/    28BC :                     
      42/    28BC :                     ; ====================================================================
      43/    28BC :                     ; ----------------------------------------------------------------
      44/    28BC :                     ; HBlank
      45/    28BC :                     ; ----------------------------------------------------------------
      46/    28BC :                     
      47/    28BC :                     MD_HBlank:
      48/    28BC : 4E73                		rte				; Return from Exception
      49/    28BE :                     
      50/    28BE :                     ; ====================================================================
      51/    28BE :                     ; ----------------------------------------------------------------
      52/    28BE :                     ; VBlank
      53/    28BE :                     ; ----------------------------------------------------------------
      54/    28BE :                     
      55/    28BE :                     ; MD_VBlank:
      56/    28BE :                     ; 		rte				; Return from Exception
      57/    28BE :                     
      58/    28BE :                     ; ====================================================================
      59/    28BE :                     ; ----------------------------------------------------------------
      60/    28BE :                     ; Main
      61/    28BE :                     ; ----------------------------------------------------------------
      62/    28BE :                     
      63/    28BE :                     MD_Main:
      64/    28BE : 6100 EC04           		bsr	Sound_Init		; Init Sound (and the Z80)
      65/    28C2 : 6100 ECCE           		bsr	Video_Init		; Init Video (default VDP setup)
      66/    28C6 : 6100 FE8A           		bsr	System_Init		; Init System (user input)
      67/    28CA :                     
      68/    28CA :                     ; ================================================================
      69/    28CA :                     ; ------------------------------------------------------------
      70/    28CA :                     ; Your 68000 code starts here
      71/    28CA :                     ; ------------------------------------------------------------
      72/    28CA :                     
      73/    28CA :                     CodeBank:
      74/    28CA :                     		include	"game/code.asm"
(1)    1/    28CA :                     ; ================================================================
(1)    2/    28CA :                     ; ------------------------------------------------------------
(1)    3/    28CA :                     ; Your game code starts here
(1)    4/    28CA :                     ; 
(1)    5/    28CA :                     ; No restrictions unless porting to Sega CD or 32X
(1)    6/    28CA :                     ; ------------------------------------------------------------
(1)    7/    28CA :                     
(1)    8/    28CA :                     ; ====================================================================
(1)    9/    28CA :                     ; ----------------------------------------------------------------
(1)   10/    28CA :                     ; Variables
(1)   11/    28CA :                     ; ----------------------------------------------------------------
(1)   12/    28CA :                     
(1)   13/    28CA :                     ; VAR_MAXSONGS	equ	((list_TrackData_e-list_TrackData)>>4)-1
(1)   14/    28CA : =$1                 VAR_MAXTRACK	equ	1
(1)   15/    28CA :                     
(1)   16/    28CA : =$FF0000            RAM_SndTstWave	equ $FF0000
(1)   17/    28CA :                     
(1)   18/    28CA :                     ; ====================================================================
(1)   19/    28CA :                     ; ----------------------------------------------------------------
(1)   20/    28CA :                     ; RAM
(1)   21/    28CA :                     ; ----------------------------------------------------------------
(1)   22/    28CA :                     
(1)   23/    28CA : (MACRO)             		struct RAM_Local
(1)   23/    28CA : =$28CA              GLBL_LASTPC     set *
(1)   23/    28CA : =$28CA              GLBL_LASTORG    set *
(1)   23/    28CA :                                     dephase
(1)   23/FFFFFFFFFFFF8004 :                                     phase RAM_LOCAL
(1)   24/FFFFFFFFFFFF8004 :                     RAM_PlyrCurrIds	ds.w 2
(1)   25/FFFFFFFFFFFF8008 :                     RAM_PlyrCurrVol	ds.w 2
(1)   26/FFFFFFFFFFFF800C :                     RAM_CurrTrack	ds.w 1
(1)   27/FFFFFFFFFFFF800E :                     RAM_CurrSelect	ds.w 1
(1)   28/FFFFFFFFFFFF8010 : (MACRO)             		finish
(1)   28/FFFFFFFFFFFF8004 :                                     !org GLBL_LASTORG
(1)   28/    28CA :                                     phase GLBL_LASTPC
(1)   29/    28CA :                     
(1)   30/    28CA :                     ; ====================================================================
(1)   31/    28CA :                     ; ----------------------------------------------------------------
(1)   32/    28CA :                     ; Init
(1)   33/    28CA :                     ; ----------------------------------------------------------------
(1)   34/    28CA :                     
(1)   35/    28CA : 6100 ED3C           		bsr	Video_Clear
(1)   36/    28CE : 0039 0002 FFFF A01C 		or.b	#%00000010,(RAM_VdpCache+$C).l
(1)   37/    28D6 : 6100 ED10           		bsr	Video_Update
(1)   38/    28DA : 203C 0000 1B46      		move.l	#Art_PrintFont,d0
(1)   39/    28E0 : 323C 0C00           		move.w	#(Art_PrintFont_e-Art_PrintFont),d1
(1)   40/    28E4 : 343C 0020           		move.w	#$20,d2
(1)   41/    28E8 : 6100 F1B4           		bsr	Video_LoadArt
(1)   42/    28EC : 41FA 005A           		lea	Pal_FmScreen(pc),a0
(1)   43/    28F0 : 7000                		moveq	#0,d0
(1)   44/    28F2 : 323C 003F           		move.w	#63,d1
(1)   45/    28F6 : 6100 ED62           		bsr	Video_LoadPal
(1)   46/    28FA :                     		
(1)   47/    28FA : 41FA 0032           		lea	str_Title(pc),a0
(1)   48/    28FE : 203C 0000 0101      		move.l	#locate(0,1,1),d0
(1)   49/    2904 : 6100 EE7E           		bsr	Video_Print
(1)   50/    2908 :                     		
(1)   51/    2908 :                     ; ====================================================================
(1)   52/    2908 :                     ; ----------------------------------------------------------------
(1)   53/    2908 :                     ; Loop
(1)   54/    2908 :                     ; ----------------------------------------------------------------
(1)   55/    2908 :                     
(1)   56/    2908 :                     FmEd_Loop:
(1)   57/    2908 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)   58/    290E : 0804 0003           		btst	#bitVBlnk,d4
(1)   59/    2912 : 6704                		beq.s	.outside
(1)   60/    2914 : 6100 FE88           		bsr	System_Input
(1)   61/    2918 :                     .outside:
(1)   62/    2918 : 3639 FFFF A008      		move.w	(Controller_1+on_press).l,d3
(1)   63/    291E : 0803 0005           		btst	#bitJoyC,d3
(1)   64/    2922 : 6706                		beq.s	.noc
(1)   65/    2924 : 4E71                		nop
(1)   66/    2926 : 4E71                		nop
(1)   67/    2928 : 4E71                		nop
(1)   68/    292A :                     .noc:
(1)   69/    292A : 60DC                		bra	FmEd_Loop
(1)   70/    292C :                     
(1)   71/    292C :                     ; ====================================================================
(1)   72/    292C :                     ; ----------------------------------------------------------------
(1)   73/    292C :                     ; VBlank
(1)   74/    292C :                     ; ----------------------------------------------------------------
(1)   75/    292C :                     
(1)   76/    292C :                     MD_VBlank:
(1)   77/    292C : 4E75                		rts
(1)   78/    292E :                     		
(1)   79/    292E :                     ; ====================================================================
(1)   80/    292E :                     ; ----------------------------------------------------------------
(1)   81/    292E :                     ; Subs
(1)   82/    292E :                     ; ----------------------------------------------------------------
(1)   83/    292E :                     
(1)   84/    292E :                     ; .copywavefifo:
(1)   85/    292E :                     ; 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   86/    292E :                     ; 		lea	(z80_cpu+dWaveBuff),a0
(1)   87/    292E :                     ; 		lea	(RAM_SndTstWave),a1
(1)   88/    292E :                     ; 		move.w	#($100/64)-1,d2
(1)   89/    292E :                     ; .wait:		btst	#0,(z80_bus).l			; Wait for it
(1)   90/    292E :                     ; 		bne.s	.wait
(1)   91/    292E :                     ; .copyme_2:
(1)   92/    292E :                     ; 	rept 64
(1)   93/    292E :                     ; 		move.b	(a0)+,d0
(1)   94/    292E :                     ; 		move.b	d0,(a1)+
(1)   95/    292E :                     ; 	endm
(1)   96/    292E :                     ; 
(1)   97/    292E :                     ; 		dbf	d2,.copyme_2
(1)   98/    292E :                     ; 		move.w	#0,(z80_bus).l
(1)   99/    292E :                     ; 		rts
(1)  100/    292E :                     
(1)  101/    292E :                     ; 		lea	(RAM_SndTstWave),a0
(1)  102/    292E :                     ; 		move.l	#$40000003+((8*$80)<<16)+((2*$02)<<16),d5
(1)  103/    292E :                     ; 		move.w	
(1)  104/    292E :                     ; .nextline:
(1)  105/    292E :                     ; 		move.l	d5,(vdp_ctrl).l
(1)  106/    292E :                     ; 		move.w	#$F,d3
(1)  107/    292E :                     ; .sendbytes:
(1)  108/    292E :                     ; 		moveq	#0,d0
(1)  109/    292E :                     ; 		moveq	#0,d1
(1)  110/    292E :                     ; 		move.w	#"0",d2
(1)  111/    292E :                     ; 		move.b	(a0)+,d0
(1)  112/    292E :                     ; 		move.b	d0,d1
(1)  113/    292E :                     ; 		and.w	#$F0,d0
(1)  114/    292E :                     ; 		and.w	#$0F,d1
(1)  115/    292E :                     ; 		lsr.w	#4,d0
(1)  116/    292E :                     ; 		cmp.b	#$A,d0
(1)  117/    292E :                     ; 		blt.s	.hexl
(1)  118/    292E :                     ; 		add.w	#7,d0
(1)  119/    292E :                     ; .hexl:
(1)  120/    292E :                     ; 		cmp.b	#$A,d1
(1)  121/    292E :                     ; 		blt.s	.hexr
(1)  122/    292E :                     ; 		add.w	#7,d1
(1)  123/    292E :                     ; .hexr:
(1)  124/    292E :                     ; 		add.w	d2,d0
(1)  125/    292E :                     ; 		swap	d0
(1)  126/    292E :                     ; 		add.w	d2,d1
(1)  127/    292E :                     ; 		move.w	d1,d0
(1)  128/    292E :                     ; 		move.l	d0,(vdp_data).l
(1)  129/    292E :                     ; 		dbf	d3,.sendbytes
(1)  130/    292E :                     		
(1)  131/    292E :                     ; 		bsr	.copywavefifo
(1)  132/    292E :                     
(1)  133/    292E :                     ; SndTest_Update:
(1)  134/    292E :                     ; 		lea	(RAM_PlyrCurrIds),a2
(1)  135/    292E :                     ; 		move.l	#locate(0,11,9),d0
(1)  136/    292E :                     ; 		moveq	#1,d3
(1)  137/    292E :                     ; .nextone:
(1)  138/    292E :                     ; 		swap	d3
(1)  139/    292E :                     ; 		move.w	#"0",d1
(1)  140/    292E :                     ; 		cmp.w	(RAM_CurrTrack),d3
(1)  141/    292E :                     ; 		bne.s	.noequltr
(1)  142/    292E :                     ; 		tst.w	(RAM_CurrSelect)
(1)  143/    292E :                     ; 		bne.s	.noequltr
(1)  144/    292E :                     ; 		add.w	#$2000,d1
(1)  145/    292E :                     ; .noequltr:
(1)  146/    292E :                     ; 		move.w	(a2)+,d2
(1)  147/    292E :                     ; 		bsr	ShowVal_custom
(1)  148/    292E :                     ; 		add.l	#$000002,d0
(1)  149/    292E :                     ; 		add.w	#1,d3
(1)  150/    292E :                     ; 		swap	d3
(1)  151/    292E :                     ; 		dbf	d3,.nextone
(1)  152/    292E :                     ; 		
(1)  153/    292E :                     ; 		lea	(RAM_PlyrCurrVol),a2
(1)  154/    292E :                     ; 		move.l	#locate(0,19,9),d0
(1)  155/    292E :                     ; 		moveq	#1,d3
(1)  156/    292E :                     ; .nextone2:
(1)  157/    292E :                     ; 		swap	d3
(1)  158/    292E :                     ; 		move.w	#"0",d1
(1)  159/    292E :                     ; 		cmp.w	(RAM_CurrTrack),d3
(1)  160/    292E :                     ; 		bne.s	.noequltr2
(1)  161/    292E :                     ; 		tst.w	(RAM_CurrSelect)
(1)  162/    292E :                     ; 		beq.s	.noequltr2
(1)  163/    292E :                     ; 		add.w	#$2000,d1
(1)  164/    292E :                     ; .noequltr2:
(1)  165/    292E :                     ; 		move.w	(a2)+,d2
(1)  166/    292E :                     ; 		bsr	ShowVal_custom
(1)  167/    292E :                     ; 		add.l	#$000002,d0
(1)  168/    292E :                     ; 		add.w	#1,d3
(1)  169/    292E :                     ; 		swap	d3
(1)  170/    292E :                     ; 		dbf	d3,.nextone2
(1)  171/    292E :                     ; 		
(1)  172/    292E :                     ; 		rts
(1)  173/    292E :                     ; 
(1)  174/    292E :                     ; SndTest_PlaySound:
(1)  175/    292E :                     ; 		move.w	(RAM_CurrTrack),d3
(1)  176/    292E :                     ; 		move.w	d3,d4
(1)  177/    292E :                     ; 		add.w	d4,d4
(1)  178/    292E :                     ; 		moveq	#0,d2
(1)  179/    292E :                     ; 		lea	(RAM_PlyrCurrVol),a0
(1)  180/    292E :                     ; 		move.w	(a0,d4.w),d2
(1)  181/    292E :                     ; 		ror.l	#8,d2
(1)  182/    292E :                     ; 		lea	list_TrackData(pc),a0
(1)  183/    292E :                     ; 		lsl.w	#4,d0
(1)  184/    292E :                     ; 		adda	d0,a0
(1)  185/    292E :                     ; 		move.l	(a0)+,d0
(1)  186/    292E :                     ; 		move.l	(a0)+,d1
(1)  187/    292E :                     ; 		or.l	(a0)+,d2
(1)  188/    292E :                     ; 		move.w	(RAM_CurrTrack),d3
(1)  189/    292E :                     ; 		bra	Sound_SetTrack
(1)  190/    292E :                     ; 
(1)  191/    292E :                     ; ShowVal_custom:
(1)  192/    292E :                     ; 		bsr	vid_PickLayer
(1)  193/    292E :                     ; 		lea	(vdp_data),a6
(1)  194/    292E :                     ; 		move.l	d4,4(a6)
(1)  195/    292E :                     ; 		move.w	d2,d4
(1)  196/    292E :                     ; 		lsr.w	#4,d4
(1)  197/    292E :                     ; 		and.w	#%1111,d4
(1)  198/    292E :                     ; 		cmp.w	#10,d4
(1)  199/    292E :                     ; 		bcs.s	.lowa
(1)  200/    292E :                     ; 		add.w	#7,d4
(1)  201/    292E :                     ; .lowa:
(1)  202/    292E :                     ; 		add.w	d1,d4
(1)  203/    292E :                     ; 		move.w	d4,(a6)
(1)  204/    292E :                     ; 		
(1)  205/    292E :                     ; 		move.w	d2,d4
(1)  206/    292E :                     ; 		and.w	#%1111,d4
(1)  207/    292E :                     ; 		cmp.w	#10,d4
(1)  208/    292E :                     ; 		bcs.s	.lowa2
(1)  209/    292E :                     ; 		add.w	#7,d4
(1)  210/    292E :                     ; .lowa2:
(1)  211/    292E :                     ; 		add.w	d1,d4
(1)  212/    292E :                     ; 		move.w	d4,(a6)
(1)  213/    292E :                     ; 		rts
(1)  214/    292E :                     
(1)  215/    292E :                     ; ====================================================================
(1)  216/    292E :                     ; ----------------------------------------------------------------
(1)  217/    292E :                     ; Small data
(1)  218/    292E :                     ; ----------------------------------------------------------------
(1)  219/    292E :                     
(1)  220/    292E : 4745 4D41 2053 6F75 str_Title:	dc.b "GEMA Sound driver, ALPHA",0
                    6E64 2064 7269 7665 
                    722C 2041 4C50 4841 
                    00                  
(1)  221/    2947 :                     		align 2
(1)  222/    2948 :                     		
(1)  223/    2948 :                     Pal_FmScreen:
(1)  224/    2948 : 0000 0EEE 0CCC 0AAA 		dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  225/    2958 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  226/    2968 : 0000 00AE 008C 006A 		dc.w $0000,$00AE,$008C,$006A,$0048,$0024,$000E,$0008
                    0048 0024 000E 0008 
(1)  227/    2978 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  228/    2988 : 0000 0AAA 0888 0666 		dc.w $0000,$0AAA,$0888,$0666,$0444,$0222,$0000,$0000
                    0444 0222 0000 0000 
(1)  229/    2998 : 0000 0000 0000 0000 		dc.w $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                    0000 0000 0000 0000 
(1)  230/    29A8 : 0000 0E00 0C00 0A00 		dc.w $0000,$0E00,$0C00,$0A00,$0800,$0400,$0000,$0000
                    0800 0400 0000 0000 
(1)  231/    29B8 : 0000 0000 0000 0000 		dc.w $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                    0000 0000 0000 0000 
(1)  232/    29C8 :                     		align 2
(1)  233/    29C8 :                     
(1)  234/    29C8 :                     ; list_TrackData:
(1)  235/    29C8 :                     ; 		dc.w MusicBlk_TestMe&$FFFF
(1)  236/    29C8 :                     ; 		dc.w MusicPat_TestMe&$FFFF
(1)  237/    29C8 :                     ; 		dc.w MusicIns_TestMe&$FFFF
(1)  238/    29C8 :                     ; 		dc.w (ZSnd_MusicBank>>15)
(1)  239/    29C8 :                     ; 		dc.b 0
(1)  240/    29C8 :                     ; 		dc.b 0
(1)  241/    29C8 :                     ; 		dc.b 0
(1)  242/    29C8 :                     ; 		dc.b 4
(1)  243/    29C8 :                     ; 		dc.l 0
(1)  244/    29C8 :                     ; 		
(1)  245/    29C8 :                     ; 		dc.w MusicBlk_Jackrab&$FFFF
(1)  246/    29C8 :                     ; 		dc.w MusicPat_Jackrab&$FFFF
(1)  247/    29C8 :                     ; 		dc.w MusicIns_Jackrab&$FFFF
(1)  248/    29C8 :                     ; 		dc.w (ZSnd_MusicBank>>15)
(1)  249/    29C8 :                     ; 		dc.b 0
(1)  250/    29C8 :                     ; 		dc.b 0
(1)  251/    29C8 :                     ; 		dc.b 0
(1)  252/    29C8 :                     ; 		dc.b 6
(1)  253/    29C8 :                     ; 		dc.l 0
(1)  254/    29C8 :                     ; 		
(1)  255/    29C8 :                     ; 		dc.w MusicBlk_Gigalo&$FFFF
(1)  256/    29C8 :                     ; 		dc.w MusicPat_Gigalo&$FFFF
(1)  257/    29C8 :                     ; 		dc.w MusicIns_Gigalo&$FFFF
(1)  258/    29C8 :                     ; 		dc.w (ZSnd_MusicBank>>15)
(1)  259/    29C8 :                     ; 		dc.b 0
(1)  260/    29C8 :                     ; 		dc.b 0
(1)  261/    29C8 :                     ; 		dc.b 0
(1)  262/    29C8 :                     ; 		dc.b 2
(1)  263/    29C8 :                     ; 		dc.l 0
(1)  264/    29C8 :                     
(1)  265/    29C8 :                     list_TrackData_e:
(1)  266/    29C8 :                     		align 2
(1)  267/    29C8 :                     
      75/    29C8 :                     
      76/    29C8 :                     		align $8000
      77/    8000 :                     TEST_WAV:
      78/    8000 :                     		binclude "FEEL.wav",$2C;,$3587E4
      79/  24DD04 :                     TEST_WAV_E:
      80/  24DD04 :                     		
      81/  24DD04 :                     ; ====================================================================
      82/  24DD04 :                     
      83/  24DD04 : (MACRO)             ROM_END:	rompad (ROM_END&$FF0000)+$10000
      83/  24DD04 : =$22FC              diff := (ROM_END&$FF0000)+$10000 - *
      83/  24DD04 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24DD04 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24E104 : =$1EFC              diff := diff - 1024
      83/  24E104 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24E104 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24E504 : =$1AFC              diff := diff - 1024
      83/  24E504 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24E504 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24E904 : =$16FC              diff := diff - 1024
      83/  24E904 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24E904 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24ED04 : =$12FC              diff := diff - 1024
      83/  24ED04 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24ED04 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24F104 : =$EFC               diff := diff - 1024
      83/  24F104 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24F104 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24F504 : =$AFC               diff := diff - 1024
      83/  24F504 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24F504 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24F904 : =$6FC               diff := diff - 1024
      83/  24F904 :                                                     ; AS can only generate 1 kb of code on a single line
      83/  24F904 : 0000 0000 0000 0000                                 dc.b [1024]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
      83/  24FD04 : =$2FC               diff := diff - 1024
      83/  24FD04 :                     
      83/  24FD04 : 0000 0000 0000 0000                         dc.b [diff]0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
      84/  250000 :                     
 AS V1.42 Beta [Bld 118] - source file main.asm - page 2 - 12/23/2020 18:25:44


  symbol table (* = unused):
  ------------------------

 ALV :                           24 - | *APPLY_BEND :                   169 C |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ART_PRINTFONT :               1B46 C |  ART_PRINTFONT_E :             2746 C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
*BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITHBLNK :                       2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - | *BITJOYB :                        4 - |
 BITJOYC :                        5 - | *BITJOYDOWN :                     1 - |
*BITJOYLEFT :                     2 - | *BITJOYMODE :                     3 - |
*BITJOYRIGHT :                    3 - | *BITJOYSTART :                    7 - |
*BITJOYUP :                       0 - | *BITJOYX :                        2 - |
*BITJOYY :                        1 - | *BITJOYZ :                        0 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLNK :                       3 - |
 BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CHECK_TICK :                   190 C |  CHECK_TICK.CTNOTICK :          1B7 C |
 CMDFIFO :                      D00 C | *CODEBANK :                    28CA C |
 COM :                            0 - |  COMMZREAD :                    D71 C |
 COMMZROMBLK :                  D73 C |  COMMZROMRD :                   D74 C |
 COMMZWRITE :                   D72 C | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFA004 - | *CONTROLLER_2 :    FFFFFFFFFFFFA00A - |
 CURRTICKBITS :                 D67 C |  DAC_FILL :                     437 C |
 DAC_FIRSTFILL :                445 C |  DAC_ME :                       423 C |
 DAC_PLAY :                     3E7 C |  DAC_REFILL :                   449 C |
 DAC_REFILL.FDF4DONE :          499 C |  DAC_REFILL.FDF7 :              50A C |
 DAC_REFILL.FDF72 :             4C3 C |  DAC_REFILL.FDFRETURN :         51E C |
*DAC_REFILL.KEEPCNTR :          472 C | *DATE :                  12/23/2020 - |
 DDACCNTR :                     D6B C |  DDACFIFOMID :                  D6E C |
 DDACPNTR :                     D68 C |  DIFF :                         2FC - |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - |  DO_MULTIPLY :                  1CD C |
 DO_MULTIPLY.MULBITCLR :        1D5 C |  DO_MULTIPLY.MUL_ADD :          1D0 C |
 DRV_LOOP :                      45 C |  DRV_LOOP.CMND_0 :               FE C |
 DRV_LOOP.LIST :                 B8 C |  DRV_LOOP.NEITHERTICK :          90 C |
 DRV_LOOP.NOBEATS :              7D C |  DRV_LOOP.NOTICKS :              65 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                    C00 C |  FALSE :                          0 - |
 FLG :                           28 - |  FMED_LOOP :                   2908 C |
 FMED_LOOP.NOC :               292A C |  FMED_LOOP.OUTSIDE :           2918 C |
*FMFREQ_LIST :                  613 C | *FMINS_AMBIENT_DARK :          1164 C |
*FMINS_AMBIENT_SPOOK :         1184 C | *FMINS_BASS_2 :                 FA4 C |
*FMINS_BASS_3 :                 FC4 C | *FMINS_BASS_5 :                 FE4 C |
*FMINS_BASS_AMBIENT :           F44 C | *FMINS_BASS_BEACH :            1084 C |
*FMINS_BASS_BEACH_2 :          10A4 C | *FMINS_BASS_CALM :              F04 C |
*FMINS_BASS_GUM :               EE4 C | *FMINS_BASS_HEAVY :             F24 C |
*FMINS_BASS_SYNTH :            1004 C | *FMINS_BELL_GLASS :            1124 C |
*FMINS_BRASS_CAVE :            10C4 C | *FMINS_BRASS_GUMMY :            F64 C |
*FMINS_DING_TOY :              11A4 C | *FMINS_DRUMCLOSEHAT :           EA4 C |
*FMINS_DRUMKICK :               E64 C | *FMINS_DRUMSNARE :              E84 C |
*FMINS_FLAUTE_1 :               F84 C | *FMINS_FM3_CLOSEDHAT :          E3C C |
*FMINS_FM3_OPENHAT :            E14 C | *FMINS_GUITAR_1 :              1024 C |
*FMINS_HORN_1 :                1044 C | *FMINS_MARIMBA_1 :             1144 C |
*FMINS_ORGAN_M1 :              1064 C | *FMINS_PIANO_M1 :               EC4 C |
*FMINS_PIANO_SMALL :           10E4 C | *FMINS_TRUMPET_2 :             1104 C |
*FMVTBL :                       DA1 C | *FMVTBLCH3 :                    DC4 C |
*FMVTBLCH6 :                    DBD C | *FULLPMMU :                       1 - |
 GEMA_INIT :                    103 C |  GET_CMDBYTE :                  169 C |
 GET_CMDBYTE.GETCBYTEL :        16B C |  GLBL_LASTORG :                28CA - |
 GLBL_LASTPC :                 28CA - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HINTENBL :                      10 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
*JOYA :                          40 - | *JOYB :                          10 - |
*JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
 LEV :                            4 - | *LISTON :                         3 - |
*LIST_TRACKDATA_E :            29C8 C |  LIST_VDPREGS :                1B32 C |
*MACEXP :                         7 - |  MAX_LOCRAM :                  2000 - |
 MAX_PRNTLIST :                  10 - | *MBOXES :                       D40 C |
 MDRAM_START :             FFFF8000 - | *MD_BANK_SRAM :              A130F1 - |
 MD_ENTRY :                     202 C |  MD_ENTRY.CLRRAM :              248 C |
 MD_ENTRY.OLDMD :               21C C |  MD_ENTRY.WAITFRAME :           228 C |
 MD_ERRADDR :                   200 C |  MD_ERRBUS :                    200 C |
 MD_ERRCHK :                    200 C |  MD_ERRILL :                    200 C |
 MD_ERROREX :                   200 C |  MD_ERRORTRAP :                 200 C |
 MD_ERRPRIVL :                  200 C |  MD_ERRTRAPV :                  200 C |
 MD_ERRZDIV :                   200 C |  MD_HBLANK :                   28BC C |
 MD_LINE1010 :                  200 C |  MD_LINE1111 :                  200 C |
 MD_MAIN :                     28BE C | *MD_MARS_ID :                A130EC - |
 MD_TRACE :                     200 C |  MD_VBLANK :                   292C C |
 MODE :                          18 - |  MOMCPU :                     68000 - |
*MOMCPUNAME :                 68000 - | *NESTMAX :                      100 - |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*PACKING :                        0 - | *PADDING :                        0 - |
*PADDINGSOFAR :                   0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C |  PAL_FMSCREEN :                2948 C |
 PAL_PRINTFONT :               2746 C | *PATCH_DATA :                   71D C |
*PSGALV :                       D99 C | *PSGATK :                       D7D C |
 PSGCOM :                       D75 C | *PSGDEC :                       D81 C |
*PSGDTH :                       D95 C | *PSGDTL :                       D91 C |
*PSGENV :                       D8D C | *PSGFREQ_LIST :                 62B C |
*PSGINS_00 :                    DF6 C | *PSGINS_01 :                    DF8 C |
*PSGINS_02 :                    DFE C | *PSGINS_03 :                    E01 C |
*PSGINS_04 :                    E0D C | *PSGLEV :                       D79 C |
*PSGRRT :                       D89 C | *PSGSLV :                       D85 C |
*PSGVTBL :                      DCC C | *PSGVTBLNG :                    DE2 C |
 PSGVTBLTG3 :                   DDA C | *PSG_CTRL :                  C00011 - |
 PSG_ENV :                      2B7 C |  PSG_ENV.ATKEND :               344 C |
 PSG_ENV.CHK2 :                 34E C |  PSG_ENV.CHK4 :                 382 C |
 PSG_ENV.CKOF :                 2E9 C |  PSG_ENV.CKON :                 2FC C |
 PSG_ENV.DKADD :                36C C |  PSG_ENV.DKSAV :                374 C |
 PSG_ENV.DKYEND :               379 C |  PSG_ENV.ENVPROC :              31A C |
 PSG_ENV.FLGOFF :               3DE C |  PSG_ENV.KILLENV :              397 C |
*PSG_ENV.MODE1 :                328 C |  PSG_ENV.NEXTPSG :              3C5 C |
 PSG_ENV.NSKIP :                312 C |  PSG_ENV.VEDLP :                3A8 C |
 PSG_ENV.VLOOP :                2C6 C | *RAM_CURRSELECT :  FFFFFFFFFFFF800E C |
*RAM_CURRTRACK :   FFFFFFFFFFFF800C C | *RAM_GLBLNULL :    FFFFFFFFFFFF8000 C |
 RAM_GLOBAL :      FFFFFFFFFFFF8000 C |  RAM_INPUTDATA :   FFFFFFFFFFFFA004 C |
 RAM_LOCAL :       FFFFFFFFFFFF8004 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFA004 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFA010 C | *RAM_PLYRCURRIDS : FFFFFFFFFFFF8004 C |
*RAM_PLYRCURRVOL : FFFFFFFFFFFF8008 C | *RAM_SNDTSTWAVE :            FF0000 - |
 RAM_VDPCACHE :    FFFFFFFFFFFFA010 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFA028 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFA088 C | *RELAXED :                        0 - |
 ROM_END :                   24DD04 C |  RRT :                           14 - |
 SBEATACC :                     D65 C |  SBEATPTCK :                    D63 C |
*SET_TEMPO :                    1BB C |  SIZEOF_GLOBAL :   FFFFFFFFFFFF8004 C |
 SIZEOF_INPUT :                   6 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFA08A C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFA010 C |  SIZEOF_MDVID :    FFFFFFFFFFFFA08A C |
 SLV :                           10 - |  SNDDRV_FMSET_1 :               2A1 C |
*SNDDRV_FMSET_2 :               2AC C |  SNDLOCKZ80 :                  1572 C |
 SNDLOCKZ80.WAIT :             157A C | *SNDSENDCMD :                  1590 C |
 SNDUNLOCKZ80 :                1586 C | *SOUND_DMA_END :               155C C |
*SOUND_DMA_START :             151E C |  SOUND_DMA_START.RETRY :       1524 C |
 SOUND_DMA_START.SAFE :        1558 C |  SOUND_DMA_START.WAIT :        152C C |
 SOUND_INIT :                  14C4 C |  SOUND_INIT.CLEANUP :          14EA C |
 SOUND_INIT.COPY :             1500 C |  SOUND_INIT.WAIT :             14D4 C |
 STR_TITLE :                   292E C | *SYSCD_ARGS_M :              A12010 - |
*SYSCD_ARGS_S :              A12020 - | *SYSCD_BUS :                 A12000 - |
*SYSCD_CDCHOST :             A12008 - | *SYSCD_CDCMODE :             A12004 - |
*SYSCD_COMM_M :              A1200E - | *SYSCD_COMM_S :              A1200F - |
*SYSCD_HINT :                A12006 - | *SYSCD_MEMORY :              A12003 - |
*SYSCD_PRGRAM :               20000 - | *SYSCD_STOPWTCH :            A12008 - |
*SYSCD_WORDRAM :             200000 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_REG :               A15100 - |  SYSTEM_INIT :                 2752 C |
 SYSTEM_INIT.WAIT :            275A C |  SYSTEM_INPUT :                279E C |
 SYSTEM_INPUT.EXIT :           27D0 C |  SYSTEM_INPUT.FIND_ID :        288C C |
 SYSTEM_INPUT.GET_ID :         28A2 C |  SYSTEM_INPUT.ID_0D :          27F6 C |
 SYSTEM_INPUT.LIST :           27D6 C |  SYSTEM_INPUT.OLDPAD :         2854 C |
 SYSTEM_INPUT.STEP_1 :         28AE C |  SYSTEM_INPUT.STEP_2 :         28BA C |
 SYSTEM_INPUT.THIS_ONE :       27B6 C |  SYSTEM_VSYNC :                2782 C |
 SYSTEM_VSYNC.WAIT :           2790 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
 SYS_IO :                    A10001 - |  SYS_TMSS :                  A14000 - |
*TESTVAL1 :                       8 C | *TESTVAL2 :                       A C |
 TEST_WAV :                    8000 C |  TEST_WAV_E :                24DD04 C |
 TICKCNT :                      D62 C |  TICKFLAG :                     D60 C |
*TIME :                    18:25:44 - |  TRANSFERROM :                  1DC C |
 TRANSFERROM.HALF_WAY :         1FD C |  TRANSFERROM.TRANSFER :         220 C |
 TRANSFERROM.X68KLAST :         263 C |  TRANSFERROM.X68KLOOP :         24F C |
 TRANSFERROM.X68KLPCONT :       257 C |  TRANSFERROM.X68KLPWT :         277 C |
 TRANSFERROM.X68KLSTCONT :      26D C |  TRANSFERROM.X68KLSTWT :        28C C |
 TRANSFERROM.X68KLSTWTLP :      290 C |  TRANSFERROM.X68KNOCARRY :      21A C |
 TRANSFERROM.X68KPWTLP :        27B C |  TRUE :                           1 - |
 VARNULLVRAM :                  7FF - | *VAR_MAXTRACK :                   1 - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VDP_PALETTE :             C0000000 - | *VDP_VSRAM :               40000010 - |
*VERSION :                     142F - | *VIDEO_AUTOMAP_VERT :          1742 C |
 VIDEO_AUTOMAP_VERT.XLOOP :    1752 C |  VIDEO_AUTOMAP_VERT.YLOOP :    1764 C |
 VIDEO_CLEAR :                 1608 C |  VIDEO_CLEAR.SMLWDW :          1648 C |
*VIDEO_COPY :                  1A18 C |  VIDEO_COPY.DMAW :             1A2C C |
 VIDEO_COPY.DMAWE :            1A86 C |  VIDEO_FILL :                  19A4 C |
 VIDEO_FILL.DMAW :             19B8 C |  VIDEO_FILL.DMAWE :            1A00 C |
 VIDEO_INIT :                  1592 C |  VIDEO_INIT.LOOP :             15A6 C |
*VIDEO_INITPRINT :             15C4 C |  VIDEO_LOADART :               1A9E C |
 VIDEO_LOADART.WAIT :          1B10 C | *VIDEO_LOADMAP :               167A C |
 VIDEO_LOADMAP.CONT :          16A0 C |  VIDEO_LOADMAP.NODBLE :        16C0 C |
 VIDEO_LOADMAP.NONULL :        169E C |  VIDEO_LOADMAP.XLOOP :         1690 C |
 VIDEO_LOADMAP.YLOOP :         1686 C | *VIDEO_LOADMAP_VERT :          16D2 C |
 VIDEO_LOADMAP_VERT.CONT :     1706 C |  VIDEO_LOADMAP_VERT.NODBLE :   1728 C |
 VIDEO_LOADMAP_VERT.NONULL :   1704 C | *VIDEO_LOADMAP_VERT.OUTDBL :   1732 C |
 VIDEO_LOADMAP_VERT.XLOOP :    16E0 C |  VIDEO_LOADMAP_VERT.YLOOP :    16F2 C |
 VIDEO_LOADPAL :               165A C |  VIDEO_LOADPAL.LOOP :          1672 C |
 VIDEO_PRINT :                 1784 C |  VIDEO_PRINT.DONIBL :          18A6 C |
 VIDEO_PRINT.EXIT :            1816 C |  VIDEO_PRINT.ISBYTE :          17E0 C |
 VIDEO_PRINT.ISLONG :          1804 C |  VIDEO_PRINT.ISWORD :          17F2 C |
 VIDEO_PRINT.LNGLOOP :         1896 C |  VIDEO_PRINT.LOOP :            17A0 C |
 VIDEO_PRINT.LOWR :            18B6 C |  VIDEO_PRINT.NEWJUMP :         179A C |
 VIDEO_PRINT.NEXT :            17C2 C |  VIDEO_PRINT.NEXTV :           1820 C |
 VIDEO_PRINT.NOTHING :         18C2 C |  VIDEO_PRINT.PUTTEXT :         17B4 C |
 VIDEO_PRINT.SPECIAL :         17C6 C |  VIDEO_PRINT.VBYTE :           1852 C |
 VIDEO_PRINT.VLONG :           189E C |  VIDEO_PRINT.VWORD :           1874 C |
 VIDEO_UPDATE :                15E8 C | *VIDEO_UPDATE.EXIT :           1606 C |
 VIDEO_UPDATE.LOOP :           15FA C |  VID_PICKLAYER :               18CC C |
 VID_PICKLAYER.GOLYR :         191C C |  VID_PICKLAYER.NOWD :          1906 C |
 VID_PICKLAYER.PLAWND :        18F4 C |  VID_PICKLAYER.THISSZ :        193C C |
 VID_PICKLAYER.THISSZJ :       1964 C |  VID_PICKSIZE :                1968 C |
 VID_PICKSIZE.SIZELIST :       1984 C | *VINTENBL :                      20 - |
 WAVE_END :                     DED C |  WAVE_LOOP :                    DF0 C |
 WAVE_PITCH :                   DF3 C |  WAVE_START :                   DEA C |
*WAVFREQ_LIST :                 523 C |  WAV_FLAGS :                    DF5 C |
*WHDFLG :                       D9D C |  X68KSRCLSB :                   D6F C |
 X68KSRCMID :                   D70 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                     300 C |  Z80_CODE_END :                14C4 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
*ZVDP_CTRL :                   7F04 - | *ZVDP_DATA :                   7F00 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |

    425 symbols
    176 unused symbols

 AS V1.42 Beta [Bld 118] - source file main.asm - page 3 - 12/23/2020 18:25:44


  defined macros:
  ---------------

DACSTREAM                             | FINISH                               
ISO_FILE                              | ISO_SETFS                            
ORG                                   | ROMPAD                               
STRUCT                                |

      7 macros

 AS V1.42 Beta [Bld 118] - source file main.asm - page 4 - 12/23/2020 18:25:44


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               | DOUBLEWORD                           

 AS V1.42 Beta [Bld 118] - source file main.asm - page 5 - 12/23/2020 18:25:44


  codepages:
  ----------

STANDARD (0 changed characters)


0.07 seconds assembly time

   3433 lines source file
   3623 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
